[{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/FunctionalPrincipalValueDecomposition.html","id":"wine-data-set","dir":"Articles","previous_headings":"","what":"Wine data set","title":"Functional Principal Value Decomposition","text":"","code":"# source the set of the needed auxiliary functions source(\"WineDataExampleAuxFunc.R\") library(DDK) #>  #> Attaching package: 'DDK' #> The following object is masked from 'package:base': #>  #>     split # get the data from the DKK pacakge data(\"Wine\") f_data_wine <- Wine$x.learning t_df_wine <- seq(1, dim(f_data_wine)[2]) # test data f_data_wine_test <- Wine$x.test t_df_wine_test <- seq(1, dim(f_data_wine_test)[2]) # remove raw 84 since it is an outlier f_data_wine <- f_data_wine[-84,] # the knots are: 0  21  28  40  83 139 167 186 193 256 knots <- c(0, 21, 28, 40, 83, 139, 167, 186, 193, 256) # prepare the knots Wine_DDKnots <- Knots_prepare(selected_knots = knots, Time = t_df_wine) n = length(Wine_DDKnots) - 1 # prepare the data Wine_prepared <- data_prepare(f_data = f_data_wine, t_data = t_df_wine) # project the data and perfrom the eigen decomposition # wine_proj = project(Wine_prepared, Wine_DDKnots) # Project wine data onto spline bases # Sigma = cov(wine_proj$coeff)  # Covariance matrix of the projection coefficients # Spect = eigen(Sigma, symmetric = T)  # eigen decomposition of the covariance matrix # EigenSp = lincomb(wine_proj$basis, t(Spect$vec))   # Create a functional eigenfunctions by linearly combining the splinets basis functions (from ProjObj$basis) with the eigenvectors (Spect$vec).  WineObj <- GetProjCovEig(f_ready_data = Wine_prepared, ready_knots = Wine_DDKnots) plot_EigenfunctionEigenValueScaled(ProjCovEigObj = WineObj, EigenNumber = 3) C_mat_Wine=WineObj$ProjObj$coeff %*% WineObj$Spect$vec EgenFunWine1 <- subsample(WineObj$EigenSp, 1) {matplot(Wine_prepared[,1],Wine_prepared[,2],type='l',lty=1,xlab='',ylab='', bty=\"n\",           col=\"deepskyblue4\", xlim = c(-1.5,dim(f_data_wine)[2]))              lines(WineObj$ProjObj$sp,sID=2-1,col='goldenrod',lty=1,lwd=1)              lines(lincomb(EgenFunWine1,C_mat_Wine[1,1,drop=F]),col='darkorange3')              abline(v = WineObj$EigenSp@knots, lty = 3, lwd = 0.5)}"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"data-preprocessing","dir":"Articles","previous_headings":"","what":"Data Preprocessing","title":"Image Classification with Splinets","text":"step involves transforming two-dimensional images one-dimensional format analysis. example source uses Hilbert curve transformation, preserves local correlations image pixels better simply stacking image’s columns rows data properly formatted, divided three parts. first largest part constitutes training data, remaining split two, validation testing. illustrating two formats data original images original images","code":"##################################### #The code accompanying the R-journal paper on Splinets package # PART II - The code illustrating the classification workflow #####################################  ##################################### #STEP 1 - DATA PREPROCESSING ############## #The Fashion MNIST are uploaded using the `keras` package #that in turn needs the `tensorflow` package  ########## #The following installations are needed merely to get access to the data  source(\"WorkFlowAuxFunction.R\") #This source all important R-functions helping in the workflow,                                  #for example, 'data_upload()' and 'data_prep()' are defined in this file # fashion_mnist=data_upload(pathfile=\"../data/fashion_mnist.RData\") #check parameters of this function                                                                 #in 'WorkFlowAuxFunction.R' if the data                                                                #are not previously uploaded.   # load(file = \"../data/fashion_mnist.RData\") load(file = \"fashion_mnist.RData\") # OneD=data_prep(dname='fashion_mnist') # save(OneD,file=\"OneD.RData\") load(file = \"OneD.RData\") #Spliting the training data into classes K=10 ArgH=OneD$Hilberttrain[,60001] #common vector of arguments  ValH=OneD$Hilberttrain[,1:60000] #values  Htrain=list() #the classes are made the elements of a list for(k in 1:K){   Htrain[[k]]=ValH[,fashion_mnist$train$y==(k-1)]  } par(mfrow = c(1, 2))  image(t(fashion_mnist$test$x[1,28:1,]),xaxt=\"n\",yaxt=\"n\") image(t(fashion_mnist$test$x[20,28:1,]),xaxt=\"n\",yaxt=\"n\")"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"images-transformed-by-vectorization","dir":"Articles","previous_headings":"","what":"images transformed by vectorization","title":"Image Classification with Splinets","text":"images transformed Hilbert curve","code":"### par(mfrow = c(1, 2))  plot(OneD$coltrain[,60001],OneD$coltrain[,1],type='l',xlab='',ylab='') plot(OneD$coltrain[,60001],OneD$coltrain[,20],type='l',xlab='',ylab='') ### par(mfrow = c(1, 2))  plot(OneD$Hilberttrain[,60001],OneD$Hilberttrain[,1],type='l',xlab='',ylab='') plot(OneD$Hilberttrain[,60001],OneD$Hilberttrain[,20],type='l',xlab='',ylab='')"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"estimating-mean-values-of-discrete-data-","dir":"Articles","previous_headings":"images transformed by vectorization","what":"Estimating mean values of discrete data.","title":"Image Classification with Splinets","text":"","code":"MeanTr=matrix(0,nrow=(32*32),ncol=10) for(k in 1:K) {   MeanTr[1:(32*32),k]=rowMeans(Htrain[[k]]) }"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"knot-selection-for-the-mean-and-the-centered-data","dir":"Articles","previous_headings":"","what":"Knot selection for the mean and the centered data","title":"Image Classification with Splinets","text":"Data-Driven Knots (DDK) selection algorithm applied training data select class-specific knots. algorithm identifies areas high curvature within class places knots accordingly, minimizing mean square error. process crucial efficient analysis directly impacts accuracy classification.","code":"# Step 2 Knot selection  # The main work in this step is done by the 'DDK' package. # The critical function from this package is 'add_knots()'.  #install.packages(\"devtools\") # library(devtools) # devtools::install_github(\"ranibasna/ddk\") library(DDK)  #Generating fitting to the noise criterion for the stopping rule set.seed(1) # AvRelErr=StopCurve() #the function is described in the sourced file, it takes some time. # save(AvRelErr,file = 'StCv.rda') #If planned to be used in the future it is good to save the results not run it again. load('StCv.rda') ######## #Running the code to select knots for the mean NInit=10 #the number of the initial to be randomly chosen knots NKnt=150+NInit+2 # set.seed(1) # MnKnts=MeansKnots(MeanTr,ArgH,NKnt,NInit,AvRelErr,L=2) # save(MnKnts,file = 'MnKnts.rda') # save the knots for the mean load('MnKnts.rda') #load the knots for the mean #Running the code to select knots for the centered data NK=1000 CDTrain=list() for(k in 1:K){   CDTrain[[k]]=Htrain[[k]][,1:NK]   CDTrain[[k]]=CDTrain[[k]]-MeanTr[,k] #Centering the data }  #The main part, selection of the knots for the centered data # CDKnts=CentDatKnots(CDTrain,AllKnts,MnKnts$knts,NKnt=150,AvRelErr) # save(CDKnts,file = 'CDKnts.rda') # save the knots for the centered data load('CDKnts.rda') #load the knots for the centered data"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"projecting-discrete-training-data-to-functional-spaces-of-splines","dir":"Articles","previous_headings":"","what":"Projecting discrete training data to functional spaces of splines","title":"Image Classification with Splinets","text":"Projecting Training Data Spline Spaces: discrete training data points projected onto third-order data-driven splinet bases, constructed based class-specific knots determined previous step.","code":"##################################### #STEP 3 - DATA PROJECTION TO SPLINE SPACES ##############  # Projecting means to the spline space # MeanSplines=list() # for(k in 1:K){ #   MeanSplines[[k]]=project(cbind(ArgH,MeanTr[,k]),MnKnts$knts[[k]]) # } #  # #Projecting data -- this is time consuming # HSplns=list() # for(k in 1:K){ #   HSplns[[k]]=project(cbind(ArgH,Htrain[[k]]),CDKnts$knts[[k]]) # }  # save(MeanSplines,HSplns,file = 'Projections.rda') #save the results load('Projections.rda') #load the results"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"illustrates-the-knot-selection-process","dir":"Articles","previous_headings":"","what":"illustrates the knot selection process","title":"Image Classification with Splinets","text":"plot selected knots mean functions centered data. Discrete mean ‘T-Shirt’ (solid line) vs. functional fit μˆ (dashed line) obtained optimal knots marked vertical dotted lines. mean `T-Shirt’  Fitting centered ‘T-shirt’ spline selected knots,  stopping rule curve stopping time means Visualization stopping algorithm knots mean functions.  Visualization stopping algorithm knot selection centered data.","code":"#################### #FIGURES  ########   k=1 prmean=MeanSplines[[k]]  plot(prmean$sp,lty=2,lwd=3) lines(ArgH,MeanTr[,k],type='l',col='red') #T-shirt mean lines(prmean$sp,lty=2,lwd=3) prTSh=project(cbind(ArgH,CDTrain[[k]][,1]),CDKnts$knts[[k]])  plot(prTSh$sp,lty=2) lines(ArgH,CDTrain[[k]][,1],type='l',col='red') #T-shirt centered lines(prTSh$sp,lty=2,lwd=2) NInit=10; KK=150 plot((NInit+2):(NInit+KK+1),AvRelErr[(NInit+2):(NInit+KK+1)],type='l',lwd=2,col='red',xlab='Number of Selected Knots',ylab='Relative Error Drop') for(k in 1:K){   nonzerr=MnKnts$err[[k]][(NInit+2):MnKnts$nknots[k]]   RelErr=-diff(nonzerr)/nonzerr[2:length(nonzerr)]   RelErr[1:10]=cumsum(RelErr[1:10])/(1:10)   avpar=3   xx=filter(RelErr,rep(1/avpar,avpar),sides=1)   RelErr[11:length(xx)]=xx[11:length(xx)]   lines((NInit+2):(NInit+length(RelErr)+1),RelErr,type='l',col=k) } plot((NInit+2):(NInit+KK+1),AvRelErr[(NInit+2):(NInit+KK+1)],type='l',lwd=2,col='red',xlab='Number of Selected Knots',ylab='Relative Error Drop')  for(k in 1:K){   nonzerr=CDKnts$err[[k]][MnKnts$nknots[k]:length(CDKnts$err[[k]])]   nonzerr[nonzerr==0]=rep(min(nonzerr[nonzerr!=0]),length(nonzerr[nonzerr==0]))   RelErr=-diff(nonzerr)/nonzerr[2:length(nonzerr)]   RelErr[1:10]=cumsum(RelErr[1:10])/(1:10)   #xx=filter(RelErr,c(1/10,1/10,1/10,1/10,1/10,1/10,1/10,1/10,1/10,1/10),sides=1)   avpar=3   xx=filter(RelErr,rep(1/avpar,avpar),sides=1)   RelErr[11:length(xx)]=xx[11:length(xx)]   lines(MnKnts$nknots[k]:(CDKnts$nknots[k]-1),RelErr,type='l',col=k) } #######"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"functional-principal-component-analysis","dir":"Articles","previous_headings":"","what":"Functional Principal component analysis","title":"Image Classification with Splinets","text":"Functional Principal Components Analysis (FPCA) Training Data: FPCA performed within class functional data points training set understand complexity data prepare classification. spectral decomposition training data. first three eigenfunctions ‘T-shirt’ class scaled square roots respective eigenfunctions.  Two approximations centered functional ‘T-shirt’ data point (NavyBlue-Dashed Line): 1) first three eigenfunctions (Blue-DottedDashed Line) ; 2) first twenty eigenfunctions (Orange-ThinSolid Line).  approximation centered around ‘T-Shirt’ class mean μˆ1 (Red-ThickSolid Line).  Projection ’Boot’ data point ’T-Shirt’ spectrum 20 eigenfunctions centering around ’T-Shirt’ class mean, discrete‘Boot’ data point (Black-Rough Line) vs. projection (Orange-Solid Line).","code":"############################################ #STEP 4 - PRINCIPAL COMPONENT ANALYSIS ##############  #Computing the covariance matrix of the isometric vectors from the `splinets' object  Sig=list() Spct=list() for(k in 1:K){   Sig[[k]]=cov(HSplns[[k]]$coeff) #The estimates of covariance                                    #(variables as columns observations as rows)   Spct[[k]]=eigen(Sig[[k]]) #columns of Spct[[k]]$vectors are eigenvectors as columns } #the end of STEP 4 ########################################## ##################### #FIGURE 7 - illustration of the role of eigenfunctions ######## k=1 #T-Shirt  #Eigenfunctions using 'Splinets'-package EigHSplns=lincomb(HSplns[[k]]$basis,t(Spct[[k]]$vectors))    ScEHSp=lincomb(subsample(EigHSplns,1:3),diag(c(sqrt(Spct[[k]]$values[1:3])))) plot(ScEHSp) ##### ### #Top-Left Graph: projections of the centered data  k=1 HS1=subsample(HSplns[[k]]$sp,1) #Chosing the functional data point  #Embeding mean to the spline space with the knots for eigenfunctions RFMeanSplines=refine(MeanSplines[[k]]$sp,newknots=CDKnts$knts[[k]])  #Centering the data point CHS1=lincomb(gather(HS1,RFMeanSplines),t(c(1,-1)))  neg=20 #The number 'neg' of the eigenfunctions EHSNeg=subsample(EigHSplns,1:neg) #Extracting `neg` eigenvalues  A1=gather(RFMeanSplines,EHSNeg) #Combining the mean with the eigenfunctions A2=gather(A1,CHS1) #Adding the centered funtional data point IP=gramian(A2)    #Aproximations of the centered data: CtAppNg=lincomb(EHSNeg,t(IP[2:(neg+1),2+neg]))  #'neg' eigenvalues  CtAppThree=lincomb(subsample(EHSNeg,1:3),t(IP[2:4,2+neg])) #three eigenvalues  plot(CHS1,sID=1,lty=2) lines(CtAppThree,lty='dotdash',col=\"blue\") lines(CtAppNg,lwd=1,col='darkorange3') ### #Bottom-Left - projections of the functional 'T-Shirt' data point centered around the class mean  A=t(c(1,IP[2:(1+neg),2+neg])) #Coefficients of the projections to the eigenfunctions  ApprxNeg=lincomb(A1,A) #The approximation with the first `neg` eigenfunctions A1=subsample(A1,1:4) #Taking 3 eigenfunctions A=t(c(1,IP[2:4,2+neg])) ApprxThree=lincomb(A1,A)   plot(HSplns[[k]]$sp,sID=1,lty=2) lines(MeanSplines[[k]]$sp,type='l',lwd=3,col='red') #Mean value spline lines(ApprxThree,lty='dotdash',col=\"blue\") lines(ApprxNeg,lwd=1,col='darkorange3') ### #Bottom-Right - projections to the 'T-Shirt' of the functional 'Boot' data point centered around the 'T-Shirt' class mean  m=10 #The boot clase  Boot2TSh=project(cbind(ArgH,Htrain[[m]][,1]),CDKnts$knts[[k]]) #projection of boots to 'T-Shirt'  #Centering the 'Boot' data point with the 'T-Shirt' mean CDBoot2TSh=lincomb(gather(Boot2TSh$sp,RFMeanSplines),t(c(1,-1)))  A1=gather(RFMeanSplines,EHSNeg) #Combining the mean with the eigenfunctions A2=gather(A1,CDBoot2TSh) #Adding the centered funtional data point IP=gramian(A2)   A=t(c(1,IP[2:(1+neg),2+neg])) #Coefficients of the projections to the eigenfunctions  ApprxNegB2T=lincomb(A1,A) #The approximation with the first `neg` eigenfunctions #pdf('Fig7BottomRight.pdf',width=7,height=4) plot(ApprxNegB2T,lwd=1,col='darkorange3') lines(cbind(ArgH,Htrain[[m]][,1]),type='l') ##"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"determining-the-significant-number-of-the-eigenfunctions","dir":"Articles","previous_headings":"","what":"Determining the significant number of the eigenfunctions","title":"Image Classification with Splinets","text":"step uses classification procedure validation data set ascertain optimal number eigenfunctions class. validation step crucial preventing overfitting ensuring accurate classification.","code":"########################################### #STEP 5 - DETERMINING SIGNIFICANT NUMBER OF THE EIGENFUNCTIONS ##############  #Computing the covariance matrix of the isometric vectors from the `splinets' object #Preparing the arguments for Classify function  #Embeding mean to the spline space with the knots for eigenfunctions Mean=list() for(k in 1:K){   Mean[[k]]=refine(MeanSplines[[k]]$sp,newknots=CDKnts$knts[[k]])    Mean[[k]]=project(Mean[[k]],knots=CDKnts$knts[[k]]) #To get also the coefficients in the splinet }  # save(Mean,file='Mean.RData') # load('Mean.RData') #computing a list of eigenvectors based on 90% training data to make cross-validation 10% sample #unbiased on the computation of covariance CrossValid=list() Eg=list() set.seed(1) for(k in 1:K){   xy=dim(Htrain[[k]])   ns=sample(1:xy[2],floor(xy[2]/10),rep=FALSE) #choosing a random sample for cross-validation   NN=1:xy[2]      CrossTrainCff=HSplns[[k]]$coeff #Columnwise coefficients in the basis   #removing 10% of the splines:   CrossTrainCff=CrossTrainCff[-ns,]   CrossValid[[k]]=Htrain[[k]][,ns] #Discrete 10% data on which crossvalidation is made      Sigma=cov(CrossTrainCff)   Eg[[k]]=eigen(Sigma) #columns of Eg[[k]]$vectors are eigenvectors } # save(CrossValid,Eg,file='CrossValid.RData') # load('CrossValid.RData') #The initial run of classification, it also create the Spline representation of the data #that later significantly save time, when Classify is run again (it needs then to be given as the  #last parameter to 'Classify()').  # nn=rep(-1,K) #only knot selection utilized for classification # ClValue=list() #  # for(k in 1:K){ #   DiscrData=cbind(ArgH,CrossValid[[k]]) #   ClValue[[k]]=Classify(DiscrData,Mean,Eg,nn) # }  # save(ClValue,file='ClValue.RData') load('ClValue.RData')  #the following yields the mean values of scaled distances for classes k=1,...,K #This is what classification one can get when only using the knot selection. for(k in 1:K){   print(mean(ClValue[[k]]$wghts[k,])) } #> [1] 0.08558239 #> [1] 0.1026267 #> [1] 0.08864395 #> [1] 0.08985855 #> [1] 0.09073909 #> [1] 0.08843436 #> [1] 0.08072168 #> [1] 0.09398921 #> [1] 0.07503983 #> [1] 0.07505798  SplData=list() for(k in 1:K) {   SplData[[k]]=ClValue[[k]]$spldt } #The beginning of searching for the optimal number of the eigenvalues nn=rep(0,K) #The means and the knots are used for classification ClValue=list()  for(k in 1:K){   DiscrData=cbind(ArgH,CrossValid[[k]])   ClValue[[k]]=Classify(DiscrData,Mean,Eg,nn,SplData[[k]]) }  #the following yields the mean values of scaled distances for classes k=1,...,K #This is what classification one can get when only using the mean and the knot selection. zz=1:K for(k in 1:K){   #print(mean(ClValue[[k]]$wghts[k,]))   zz[k]=mean(ClValue[[k]]$cls==k)   print(mean(ClValue[[k]]$cls==k)) } #> [1] 0.665 #> [1] 0.875 #> [1] 0.3283333 #> [1] 0.7116667 #> [1] 0.6566667 #> [1] 0.7516667 #> [1] 0.2283333 #> [1] 0.795 #> [1] 0.76 #> [1] 0.8633333"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"testing-the-classification-procedure","dir":"Articles","previous_headings":"","what":"Testing the Classification Procedure","title":"Image Classification with Splinets","text":"testing step involves classifying data point testing set projecting onto ten functional spaces utilizing classification rule. results compared actual class memberships summarized confusion matrix assess method’s efficiency.","code":"#############################################   #Preparation of the testing data sets #Spliting the testing data into classes  ArgH=OneD$Hilberttest[,10001] #common vector of arguments  TestH=OneD$Hilberttest[,1:10000]   Htest=list() #the classes become elements of a list for(k in 1:K){   Htest[[k]]=TestH[,fashion_mnist$test$y==(k-1)]  } #end of the testing data preparation"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"classification-of-the-testing-data","dir":"Articles","previous_headings":"Testing the Classification Procedure","what":"Classification of the testing data","title":"Image Classification with Splinets","text":"","code":"#Running the test of the classification procedure on testing data, takes some time. # TesT=list() # for(k in 1:K){ #   DiscrData=cbind(ArgH,Htest[[k]]) #   TesT[[k]]=Classify(DiscrData,Mean,Spct,nn0) #nn0-contains the number of eigenvectors for each class #                                               #Spct - the spectrum based on all training data # }  # save(TesT,file='TesT.RData') load('TesT.RData')  Acc=vector('numeric',K) for(k in 1:K){   Acc[k]=mean(TesT[[k]]$clss==k) #Computing accuracies per class }  Acc* mean(Acc) #>  [1] 0.5547374 0.7293912 0.4631788 0.6285998 0.5039570 0.6647616 0.2731370 #>  [8] 0.7001540 0.7009234 0.7009234  Dist=vector('numeric',K) for(k in 1:K){   Dist[k]=mean(TesT[[k]]$wghts[k,]) #Computing distances per class }  round(Dist,3) #>  [1] 0.054 0.047 0.056 0.051 0.050 0.046 0.063 0.028 0.047 0.028"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/ImageClassification.html","id":"final-evaluation-and-conclusions","dir":"Articles","previous_headings":"","what":"Final evaluation and conclusions","title":"Image Classification with Splinets","text":"Final Evaluation Conclusions: stage case-specific depends goal analysis. involves analyzing classification results, examining misclassified data points, identifying potential areas improvement.","code":"#############################################  #Creating values to the confusion matrix  Confusion=matrix(0,ncol=K,nrow=K)  for(l in 1:K){   for(k in 1:K){     Confusion[l,k]=mean(TesT[[k]]$clss==l)   } }"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/IntroductiontoSplinets.html","id":"introduction-to-splinets","dir":"Articles","previous_headings":"","what":"Introduction to Splinets","title":"Introduction to Splinets","text":"Examples splines non-equally spaced knots (first two figures) equally spaced knots (right). individual splines random spline samples generated around use implemented random spline generator. Vertical dashed lines figures placed locations knots.     result shown demonstrate knot distribution fundamental shaping geometry functional spaces. difference nature two linear functional spaces observed obvious, first twographs see capacity focus localized variability detail, capacity lacked splines right-hand side graphs.","code":"n=20; k=3 #Number of knots and the order of splines set.seed(10) xi=sort(rbeta(n+2,2,5)); xi[1]=0; xi[n+1]=1 #Randomly distributed knots  S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) #Random matrix of derivatives spl=construct(xi,k,S) #A spline object with corrected matrix of the derivatives #>  #> Using  method RRM to correct the derivative matrix entries. #> NOTE: Knots are not in the strictly increasing order, which is required. #>  #>         The knots have been ordered and ties have been removed. #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> The spline 1 'ths highest derivative at the two central knots has been made equal by averaging SLOT 'der'. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.317087 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 1 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 1 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . plot(spl) y=rspline(spl,10) #Random spline generator plot(y) xi2=seq(0,1,by=1/(n+1)) spl2=construct(xi2,k,S) #Another spline object #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.326947 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM . plot(spl2) y2=rspline(spl2,10) #Another random sample plot(y2)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/IntroductiontoSplinets.html","id":"orthonormal-bases-of-splines","dir":"Articles","previous_headings":"","what":"Orthonormal bases of splines","title":"Introduction to Splinets","text":"Cubic spline bases presented graphically sequential form (top) dyadic net (bottom). case n=k2N−1=95n=k2^N-1=95, k=3k=3, N=5N=5 number layers dyadic structure seen figures. first B-spline basis; corresponding splinet.","code":"k=3; N=5 #Order of splines and the number of layers n=k*2^N-1 #Number of knots set.seed(2) xi=cumsum(runif(n+2,min=0.2)) #Random knots so = splinet(xi, k) #Evaluation of the B-splines and the splinet  plot(so$bs,type='dyadic') #B-splines on the dyadic net plot(so$os) #Splinet on the dyadic net"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/articles/MassSpectrometry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"INTRODUCTION","title":"Splinets Statistical Application: mass spectrometry","text":"ovarian cancer tissue low-resolution SELDI-TOF mass spectrum (orange) various representations Splinet-objects approximately 200 dimensional spline spaces: Reading raw spectrum obtained original data set (A01.csv). original sample (orange) consisting 15154 values.  projection (navy-blue) spline space spanned 200 equally spaced knots.  projection (red) spline space spanned 200 non-equally spaced knots locations chosen spectrum.  projection splines sparse domain obtained specifying five importance regions, graph five support intervals drawn different color.","code":"#The file-path needs to be adequate to the location of data # Path='../data/A01.csv' Path='A01.csv' Ovarian=read.table(Path,header=TRUE,sep=\",\",col.names=c('ms','Intensity')) plot(Ovarian$ms,Ovarian$Intensity,type='h',xlab='m/s',ylab='Intensity',col='orange',axes=FALSE)#,xaxt='n') axis(1, at=seq(0, 20000, by=200),col = \"blue\") axis(2, col = \"blue\") #Equally spaced 200 knots, xi1=seq(min(Ovarian$ms),max(Ovarian$ms),length.out=200) so1 = splinet(xi1)  #Orthogonal basis of splines OvSpl1=project(as.matrix(Ovarian),basis=so1$os) #Projection to the basis # plot(Ovarian$ms,Ovarian$Intensity,type='h',xlab='m/s',ylab='Intensity',col='orange',axes=FALSE)#,xaxt='n') axis(1, at=seq(0, 20000, by=200),col = \"blue\") axis(2, col = \"blue\") lines(OvSpl1$sp) wghts=abs(Ovarian$Intensity)/sum(abs(Ovarian$Intensity)) #Weights for knot selection xi2=sort(sample(Ovarian$ms,200,prob=wghts)) #Random knots          so2 = splinet(xi2) #Orthogonal basis of splines          OvSpl2=project(as.matrix(Ovarian),basis=so2$os) #Projection to the basis #> The range of the input data is larger than the range of knots in the projection space. #>  #> The  964  values at the arguments outside the projection range will not affect the projection. # plot(Ovarian$ms,Ovarian$Intensity,type='h',xlab='m/s',ylab='Intensity',col='orange',axes=FALSE)#,xaxt='n') axis(1, at=seq(0, 20000, by=200),col = \"blue\") axis(2, col = \"blue\") lines(OvSpl1$sp) lines(OvSpl2$sp,col='red') xi3=seq(min(Ovarian$ms),max(Ovarian$ms),length.out=300) so3 = splinet(xi3) OvSpl3=project(as.matrix(Ovarian),basis=so3$os)  IndKn=1:length(OvSpl3$sp@knots) Nsupp=5 #the number of support intervals LE=c(700,6500,11400,13600,16500) RE=c(5400,10800,12100,15900,18800)  OvSpl4=OvSpl3$sp OvSpl4@supp=list() for(l in 1:Nsupp){   J=IndKn[OvSpl3$sp@knots>LE[l] & OvSpl3$sp@knots<RE[l]]   OvSpl4@supp[[l]]=matrix(c(min(J),max(J)),nrow=1) }  OvSpl4@der=list() Der=sym2one(OvSpl3$sp@der[[1]]) for(l in 1:Nsupp){   OvSpl4@der[[l]]=sym2one(Der[OvSpl4@supp[[l]][1,1]:OvSpl4@supp[[l]][1,2],],inv=TRUE) }  OvSpl4@knots[c(OvSpl4@supp[[1]][1,1],OvSpl4@supp[[1]][1,2])] #> [1]  735.6208 5349.9700 OvSpl4@knots[c(OvSpl4@supp[[2]][1,1],OvSpl4@supp[[2]][1,2])] #> [1]  6553.713 10766.815 OvSpl4@knots[c(OvSpl4@supp[[3]][1,1],OvSpl4@supp[[3]][1,2])] #> [1] 11435.56 12037.43 OvSpl4@knots[c(OvSpl4@supp[[4]][1,1],OvSpl4@supp[[4]][1,2])] #> [1] 13642.42 15849.29 OvSpl4@knots[c(OvSpl4@supp[[5]][1,1],OvSpl4@supp[[5]][1,2])] #> [1] 16518.03 18791.77  plot(Ovarian$ms,Ovarian$Intensity,type='h',xlab='m/s',ylab='Intensity',col='grey',axes=FALSE)#,xaxt='n') axis(1, at=seq(0, 20000, by=200),col = \"blue\") axis(2, col = \"blue\")    lines(OvSpl4)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rani Basna. Author. Xijia Liu. Author. Hiba Nassar. Author. Krzysztof Podgorski. Author, maintainer, copyright holder. Hanqing Wu. Author.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Basna R, Liu X, Nassar H, Podgorski K, Wu H (2024). Splinets: Functional Data Analysis using Splines Orthogonal Spline Bases. R package version 1.5.1.","code":"@Manual{,   title = {Splinets: Functional Data Analysis using Splines and Orthogonal Spline Bases},   author = {Rani Basna and Xijia Liu and Hiba Nassar and Krzysztof Podgorski and Hanqing Wu},   year = {2024},   note = {R package version 1.5.1}, }"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/index.html","id":"splinets","dir":"","previous_headings":"","what":"Functional Data Analysis using Splines and Orthogonal Spline Bases","title":"Functional Data Analysis using Splines and Orthogonal Spline Bases","text":"goal Splinets …","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functional Data Analysis using Splines and Orthogonal Spline Bases","text":"can install {Splinets} following code. can install development version Splinets GitHub :","code":"install.packages(\"Splinets\") # install.packages(\"devtools\") devtools::install_github(\"ranibasna/R-Splinets\")"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/Splinets-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The class to represent a collection of splines — Splinets-class","title":"The class to represent a collection of splines — Splinets-class","text":"main class splinets-package used representing collection splines.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/Splinets-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The class to represent a collection of splines — Splinets-class","text":"running new(\"Splinets\") return object belongs class Splinets, initialization default values fields.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/Splinets-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The class to represent a collection of splines — Splinets-class","text":"knots numeric n+2 vector, vector n+2 knot locations presented increasing order without ties; smorder non-negative integer, smoothnes order splines, .e. highest order non-zero derivative; equid logical, indicates knots equidistant; computations equidistant case simpler information helps account . supp list (matrices), length(supp)==0 – full support set splines, length(supp)==N – support sets N splines; non-empty, list containing Nsupp x 2 matrices (positive integers). Nsupp equal one row matrix (vector). rows matrices, supp[[]][l,], l 1:Nsupp represents indices knots endpoints intervals support sets. support set represented union disjoint Nsupp intervals, knots endpoints. Outside set (support), spline vanishes. matrix list ordered rows closer top correspond intervals closer LHS end support. der list (matrices); list length N containing sum(supp[[]][,2]-supp[[]][,1]+1) x (smorder+1) matrices, index running list. matrix list includes values derivatives knots support corresponding spline. taylor (n+1) x (smorder+1), equid=FALSE, 1 x (smorder+1) equid=TRUE,  columnwise vectors  Taylor expansion coefficients knots; Vectors instead matrices recognized properly. knot order dependent matrix rows coefficients used Taylor expansion splines. evaluated can used computations spline given order given knots. columns matrix used evaluation values splines -knots, see references details. type string, one following character strings: bs,gsob,twob,dspnt,spnt,sp; default sp indicates unstructured collection splines. rest strings indicate different spline bases: bs B-splines, gsob Gram-Schmidt O-splines, twob two-sided O-splines, dspnt fully dyadic splinet, spnt non-dyadic splinet. periodic logical, indicates B-splines periodic . epsilon numeric (positive), accuracy used detect problem conditions required matrix derivatives (controls relative deviation conditions);","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/Splinets-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The class to represent a collection of splines — Splinets-class","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/Splinets-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The class to represent a collection of splines — Splinets-class","text":"","code":"#-------------------------------------------------------------# #-------Generating an object from the class 'Splinets'--------# #-------------------------------------------------------------# #The most generic generation of an object of class 'Splinets': sp=new(\"Splinets\") #a generic format for 'Splinets' object sp #> splines #> Knots: 2 equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 0  #> Support: The full support range for each spline. #The most important SLOTs of 'Splinets' - the default values sp@knots #> [1] 0 1 sp@smorder #> [1] 0 sp@der #> [[1]] #>      [,1] #> [1,]    1 #> [2,]    1 #>  sp@supp #> list()  set.seed(5); n=13; xi=sort(runif(n+2)); xi[1]=0;xi[n+2]=1 sp@knots=xi #randomly assigned knots  #Changing the order of  #smoothness and intializing Taylor coefficients ssp=new(\"Splinets\",knots=xi,smorder=2) ssp@taylor #>       [,1]       [,2]         [,3] #>  [1,]    1 0.11045302 6.099935e-03 #>  [2,]    1 0.08976143 4.028558e-03 #>  [3,]    1 0.06237869 1.945550e-03 #>  [4,]    1 0.01069181 5.715741e-05 #>  [5,]    1 0.01111451 6.176614e-05 #>  [6,]    1 0.03400456 5.781551e-04 #>  [7,]    1 0.17210918 1.481079e-02 #>  [8,]    1 0.03744678 7.011308e-04 #>  [9,]    1 0.03121284 4.871208e-04 #> [10,]    1 0.12604577 7.943768e-03 #> [11,]    1 0.01583886 1.254348e-04 #> [12,]    1 0.10687774 5.711426e-03 #> [13,]    1 0.10894057 5.934024e-03 #> [14,]    1 0.08312423 3.454818e-03  #Equidistant case ssp=new(\"Splinets\",knots=seq(0,1,1/(n+1)),smorder=3) ssp@taylor #>      [,1]       [,2]       [,3]         [,4] #> [1,]    1 0.07142857 0.00255102 6.073858e-05 ssp@equid #> [1] TRUE"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/construct.html","id":null,"dir":"Reference","previous_headings":"","what":"Construction of a Splinets object — construct","title":"Construction of a Splinets object — construct","text":"function constructs Splinets object correspond single spline (size=1) vector knots matrix proposed derivatives. matrix tested correctness like .splinets adjusted using one implemented methods.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/construct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construction of a Splinets object — construct","text":"","code":"construct(knots, smorder, matder, supp = vector(), mthd = \"RRM\")"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/construct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construction of a Splinets object — construct","text":"knots n+2 vector, knots spline built; least 2*smorder+4 knots. smorder integer, order smoothness; matder (n+2)x(smorder+1) matrix, matrix derivatives; matrix corrected correspond proper spline. supp vector, either empty two integers representing single interval support; mthd string, one three methods correction matrix derivative: 'CRLC' matching mostly highest derivative, 'CRFC' matching mostly function values knots, 'RRM' balanced matching derivatives; default method 'RRM', see paper package details methods.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/construct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construction of a Splinets object — construct","text":"Splinets-object corresponding single spline.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/construct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construction of a Splinets object — construct","text":"function constructs Splinet-object single interval support. Combining function lincom allows introduce multi-component support.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/construct.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construction of a Splinets object — construct","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/construct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construction of a Splinets object — construct","text":"","code":"#-------------------------------------------------------------# #---Building 'Splinets' using different derviative matching---# #-------------------------------------------------------------# n=17; k=4 set.seed(5) xi=sort(runif(n+2)); xi[1]=0; xi[n+1]=1   #Random matrix of derivatives -- the noise (wild) case to be corrected S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))  spl=construct(xi,k,S) #construction of an object, the order of knots is corrected #>  #> Using  method RRM to correct the derivative matrix entries. #> NOTE: Knots are not in the strictly increasing order, which is required. #>  #>         The knots have been ordered and ties have been removed. #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.449216 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . is.splinets(spl)[[1]] #validation #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> [1] TRUE  spl=construct(xi,k,S,mthd='CRFC') #another method of the derivative matching #>  #> Using  method CRFC to correct the derivative matrix entries. #> NOTE: Knots are not in the strictly increasing order, which is required. #>  #>         The knots have been ordered and ties have been removed. #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.449216 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRFC . is.splinets(spl)[[1]] #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 0.0001237886 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> [1] FALSE  spl=construct(xi,k,S,mthd='CRLC') #one more method #>  #> Using  method CRLC to correct the derivative matrix entries. #> NOTE: Knots are not in the strictly increasing order, which is required. #>  #>         The knots have been ordered and ties have been removed. #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.449216 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRLC . is.splinets(spl)[[1]]              #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> [1] TRUE  #-----------------------------------------------------# #---------Building not over the full support----------# #-----------------------------------------------------# set.seed(5) n=20; xi=sort(runif(n+2));xi[1]=0;xi[n+2]=1  spl=construct(xi,k,S) #construction of a spline as the 'Splinets' object over the entire range #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The full support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 0.3198203 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . is.splinets(spl)[[1]] #verification of the conditions #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> [1] TRUE  supp=c(3,17) #definition of the single interval support SS=matrix(rnorm((supp[2]-supp[1]+1)*(k+1)),ncol=(k+1)) #The matrix of derivatives                                                         #over the support range sspl=construct(xi,k,SS,supp=supp) #construction of a spline as the 'Splinets' object  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.191293 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM .                                   #with the given support range is.splinets(sspl)[[1]] #Verification  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> [1] TRUE sspl@knots #>  [1] 0.0000000 0.1104530 0.2002145 0.2018752 0.2625931 0.2732849 0.2843995 #>  [8] 0.3184040 0.3875257 0.4905132 0.5279600 0.5549226 0.5591728 0.6852186 #> [15] 0.7010575 0.7207010 0.8079352 0.8421794 0.8878698 0.8902071 0.9168758 #> [22] 1.0000000 sspl@supp #> [[1]] #>      [,1] [,2] #> [1,]    3   17 #>  sspl@der #> [[1]] #>                [,1]         [,2]         [,3]          [,4]          [,5] #>  [1,]  0.000000e+00  0.000000000    0.0000000  0.000000e+00 -2.491073e+06 #>  [2,] -7.895895e-07 -0.001901756   -3.4353389 -4.137072e+03  2.036150e+05 #>  [3,] -4.548393e-02 -0.240063921  120.7005838  8.226010e+03 -2.189334e+06 #>  [4,] -4.066812e-02  1.074642126   83.5148611 -1.518194e+04  1.366034e+06 #>  [5,] -2.617116e-02  1.377733343   -0.8502306  8.601130e-01 -1.553485e-01 #>  [6,]  2.019212e-02  1.349317883   -0.8210727  8.548304e-01 -5.366470e+00 #>  [7,]  1.115398e-01  1.294310650   -0.7748053  4.838908e-01  1.210901e-01 #>  [8,]  2.408173e-01  1.217103639   -0.7243285  4.963615e-01  0.000000e+00 #>  [9,]  2.858903e-01  1.190322956   -0.7061360  4.752833e-01 -5.628851e-01 #> [10,]  3.177287e-01  1.171357525   -0.7043309 -3.413863e-01 -3.028901e+01 #> [11,]  3.227009e-01  1.168360821   -0.7057976 -3.487915e-01 -1.742302e+00 #> [12,]  2.848758e-01 -4.615556858 -136.2287432 -2.150028e+03 -1.705475e+04 #> [13,]  1.966757e-01 -6.180076409   -6.8472951  1.848724e+04  1.302951e+06 #> [14,]  9.043977e-02 -4.146985387  142.6155317 -3.269715e+03 -1.107590e+06 #> [15,]  0.000000e+00  0.000000000    0.0000000  0.000000e+00  3.748202e+04 #>"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/deriva.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivatives of splines — deriva","title":"Derivatives of splines — deriva","text":"function generates Splinets-object contains first order derivatives splines input Splinets-object. function also verifies support set output provide accurate information support sets excluding regions original function constant.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/deriva.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivatives of splines — deriva","text":"","code":"deriva(object, epsilon = 1e-07)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/deriva.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivatives of splines — deriva","text":"object Splinets object smoothness order k; epsilon positive number, controls removal knots support; derivative smaller number, considered zero corresponding knots removed support.default value 1e-7.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/deriva.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivatives of splines — deriva","text":"Splinets-object order k-1 also contains updated information support set.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/deriva.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Derivatives of splines — deriva","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/deriva.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derivatives of splines — deriva","text":"","code":"#-------------------------------------------------------# #--- Generating the deriviative functions of splines ---# #-------------------------------------------------------# n=13; k=4 set.seed(5) xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1 spl=construct(xi,k,matrix(rnorm((n+2)*(k+1)),ncol=(k+1))) #constructing three splines #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.421221 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . spl=gather(spl, construct(xi,k,matrix(rnorm((n+2)*(k+1)),ncol=(k+1))))  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.555902 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . spl=gather(spl, construct(xi,k,matrix(rnorm((n+2)*(k+1)),ncol=(k+1))))  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.35308 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . # calculate the derivative of splines dspl = deriva(spl) plot(spl)  plot(dspl)   #----------------------------------------------# #--- Examples with different support ranges ---# #----------------------------------------------#  n=25; k=3 xi=seq(0,1,by=1/(n+1)); set.seed(5) #Defining support ranges for three splines supp=matrix(c(2,12,4,20,6,25),byrow=TRUE,ncol=2) #Initial random matrices of the derivative for each spline SS1=matrix(rnorm((supp[1,2]-supp[1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[2,2]-supp[2,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[3,2]-supp[3,1]+1)*(k+1)),ncol=(k+1))  spl=construct(xi,k,SS1,supp[1,]) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.31684 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[2,]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.294431 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the second and the first ones nspl=construct(xi,k,SS3,supp[3,]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.640386 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the third is added  der_spl = deriva(spl) par(mar=c(1,1,1,1)) par(mfrow=c(2,1)) plot(der_spl) plot(spl)  par(mfrow=c(1,1))"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/dintegra.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculating the definite integral of a spline. — dintegra","title":"Calculating the definite integral of a spline. — dintegra","text":"function calculates definite integrals splines input  Splinets-object.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/dintegra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating the definite integral of a spline. — dintegra","text":"","code":"dintegra(object, sID = NULL)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/dintegra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating the definite integral of a spline. — dintegra","text":"object Splinets-object; sID vector integers, indicies specifying splines Splinets-object definite integral evaluated; sID=NULL, definite integral splines object calculated. default NULL.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/dintegra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculating the definite integral of a spline. — dintegra","text":"length(sID) x 2 matrix, first column holding id splines second column holding corresponding definite integrals.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/dintegra.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculating the definite integral of a spline. — dintegra","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/dintegra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculating the definite integral of a spline. — dintegra","text":"","code":"#------------------------------------------# #--- Example with common support ranges ---# #------------------------------------------# n=23; k=4 set.seed(5) xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1 # generate a random matrix S S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) # construct the spline spl=construct(xi,k,S) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.441088 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . spl=gather(spl,construct(xi,k,S,mthd='CRFC')) #the second and the first ones #>  #> Using  method CRFC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.441088 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRFC . spl=gather(spl,construct(xi,k,S,mthd='CRLC')) #the third is added #>  #> Using  method CRLC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.441088 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRLC .  plot(spl)  dintegra(spl, sID = c(1,3)) #>      Spline ID  dIntegral #> [1,]         1 -0.2817531 #> [2,]         3  0.2713847 dintegra(spl) #>      Spline ID     dIntegral #> [1,]         1 -2.817531e-01 #> [2,]         2  4.126813e+08 #> [3,]         3  2.713847e-01 plot(spl,sID=c(1,3))   #---------------------------------------------# #--- Examples with different support ranges---# #---------------------------------------------#  n=25; k=2 xi=seq(0,1,by=1/(n+1)) #Defining support ranges for three splines supp=matrix(c(2,12,4,20,6,25),byrow=TRUE,ncol=2) #Initial random matrices of the derivative for each spline set.seed(5) SS1=matrix(rnorm((supp[1,2]-supp[1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[2,2]-supp[2,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[3,2]-supp[3,1]+1)*(k+1)),ncol=(k+1))  spl=construct(xi,k,SS1,supp[1,]) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.376113 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[2,]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.307197 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the second and the first ones nspl=construct(xi,k,SS3,supp[3,]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.655723 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the third is added  plot(spl)  dintegra(spl, sID = 1) #> Error in dintegra(spl, sID = 1): object 'n' not found dintegra(spl) #> Error in dintegra(spl): object 'n' not found  #The third order case n=40; xi=seq(0,1,by=1/(n+1)); k=3;  support=list(matrix(c(2,12,15,27,30,40),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))); sp1 = is.splinets(sp)[[2]]  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.302027 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 support 2 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 2 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.663474 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 support 3 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 3 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.192439 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method.  support=list(matrix(c(2,13,17,30),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))); sp2 = is.splinets(sp)[[2]]  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.382402 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 2 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 2 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.489447 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method.  sp = gather(sp1,sp2) dintegra(sp) #> Error in dintegra(sp): object 'n' not found plot(sp)   lcsp=lincomb(sp,matrix(c(-1,1),ncol=2)) dintegra(lcsp)                  #linearity of the integral #> Error in dintegra(lcsp): object 'n' not found dintegra(sp2)-dintegra(sp1) #> Error in dintegra(sp2): object 'n' not found"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/evspline.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluating splines at given arguments. — evspline","title":"Evaluating splines at given arguments. — evspline","text":"Splinets-object S vector arguments t, function returns matrix values splines S. evaluations done Taylor expansions, \\(\\)th interval \\(t\\[\\xi_i,\\xi_{+1}]\\): $$S(t)=\\sum_{j=0}^{k} s_{j} \\frac{(t-\\xi_{})^j}{j!}.$$ zero order splines discontinuous knots, following convention taken. LHS knots value taken RHS-limit,  RHS knots LHS-limit. value central knot zero order odd number knots case assumed zero.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/evspline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluating splines at given arguments. — evspline","text":"","code":"evspline(object, sID = NULL, x = NULL, N = 250)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/evspline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluating splines at given arguments. — evspline","text":"object Splinets object; sID vector integers, indicies specifying splines Splinets list evaluated; sID=NULL, splines Splinet-object evaluated. default value NULL. x vector, arguments splines evaluated; x NULL, splines evaluated regular grids per interval support. default value x=NULL. N integer, number points per interval two consequitive knots splines evaluated. default value N = 250;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/evspline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluating splines at given arguments. — evspline","text":"length(x) x length(sID+1) matrix containing argument values, first column, , columnwise, values subsequent splines.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/evspline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluating splines at given arguments. — evspline","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/evspline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluating splines at given arguments. — evspline","text":"","code":"#---------------------------------------------# #-- Example piecewise polynomial vs. spline --# #---------------------------------------------# n=20; k=3; xi=sort(runif(n+2)) sp=new(\"Splinets\",knots=xi)   #Randomly assigning the derivatives -- a very 'wild' function. S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) sp@supp=list(t(c(1,n+2))); sp@smorder=k; sp@der[[1]]=S  y = evspline(sp) plot(y,type = 'l',col='red')  #A correct spline object nsp=is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #> The Taylor expansion coefficient matrix does not have the proper number of columns. #> It is evaluated now and assigned to the output. #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.512227 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 1 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 1 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. sp2=nsp$robject  y = evspline(sp2) lines(y,type='l')   #---------------------------------------------# #-- Example piecewise polynomial vs. spline --# #---------------------------------------------# #Gathering three 'Splinets' objects using three different #method to correct the derivative matrix n=17; k=4; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1  S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) # generate a random matrix S  spl=construct(xi,k,S) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.562798 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . spl=gather(spl,construct(xi,k,S,mthd='CRFC')) #the second and the first ones #>  #> Using  method CRFC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.562798 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRFC . spl=gather(spl,construct(xi,k,S,mthd='CRLC')) #the third is added #>  #> Using  method CRLC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.562798 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRLC . y = evspline(spl, sID= 1) plot(y,type = 'l',col='red')   y = evspline(spl, sID = c(1,3)) plot(y[,1:2],type = 'l',col='red') points(y[,c(1,3)],type = 'l',col='blue')   #sID = NULL y = evspline(spl) plot(y[,1:2],type = 'l',col='red',ylim=range(y[,2:4])) points(y[,c(1,3)],type = 'l',col='blue') points(y[,c(1,4)],type = 'l',col='green')   #---------------------------------------------# #--- Example with different support ranges ---# #---------------------------------------------# n=25; k=3; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1 #Defining support ranges for three splines supp=matrix(c(2,12,4,20,6,25),byrow=TRUE,ncol=2) #Initial random matrices of the derivative for each spline SS1=matrix(rnorm((supp[1,2]-supp[1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[2,2]-supp[2,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[3,2]-supp[3,1]+1)*(k+1)),ncol=(k+1))  spl=construct(xi,k,SS1,supp[1,]) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.396783 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[2,],'CRFC') #>  #> Using  method CRFC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.945662 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method.The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRFC . spl=gather(spl,nspl) #the second and the first ones nspl=construct(xi,k,SS3,supp[3,],'CRLC') #>  #> Using  method CRLC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.470755 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method.The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative is not symmetrically defined at the center. #>           The values at the two central knots should be equal. #> The highest order derivative values at the two central knots #>           have been made equal by averaging the two central values. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRLC . spl=gather(spl,nspl) #the third is added  y = evspline(spl, sID= 1) plot(y,type = 'l',col='red')   y = evspline(spl, sID = c(1,3)) plot(y[,1:2],type = 'l',col='red') points(y[,c(1,3)],type = 'l',col='blue')   #sID = NULL -- all splines evaluated y = evspline(spl) plot(y[,c(1,3)],type = 'l',col='red',ylim=c(-1,1)) points(y[,1:2],type = 'l',col='blue') points(y[,c(1,4)],type = 'l',col='green')"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/exsupp.html","id":null,"dir":"Reference","previous_headings":"","what":"Correcting support sets and reshaping the matrix of derivatives at the knots. — exsupp","title":"Correcting support sets and reshaping the matrix of derivatives at the knots. — exsupp","text":"function adjusting potential reduction support sets due negligibly small values rows derivative matrix. derivative matrix row equal zero (smaller neglible positive value) one-sided representation (see references sym2one), corresponding knot removed support set. function can used eliminate neglible support components Splinets-object.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/exsupp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correcting support sets and reshaping the matrix of derivatives at the knots. — exsupp","text":"","code":"exsupp(S, supp = NULL, epsilon = 1e-07)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/exsupp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correcting support sets and reshaping the matrix of derivatives at the knots. — exsupp","text":"S (m+2)x(k+1) matrix, values derivatives knots input support set cardinality m+2; matrix assumed symmetric around center form component support. supp NULL Nsupp x2 matrix integers,  endpoints indices input support intervals, Nsupp number components support set; parameter NULL, full support assumed. epsilon small positive number, threshold value norm rows S; norm row S less epsilon, viewed neglible knot excluded inside support set.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/exsupp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correcting support sets and reshaping the matrix of derivatives at the knots. — exsupp","text":"list two elements: exsupp$rS reduced derivative matrix neglible rows, , removed  exsupp$rsupp corresponding reduced support. output matrix support components symmetric around center form, derivatives kept Splinets-objects.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/exsupp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correcting support sets and reshaping the matrix of derivatives at the knots. — exsupp","text":"function typically applied element list given SLOT der Splinets-object. eliminates support sets regions negligible values corresponding spline derivatives.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/exsupp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Correcting support sets and reshaping the matrix of derivatives at the knots. — exsupp","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/exsupp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correcting support sets and reshaping the matrix of derivatives at the knots. — exsupp","text":"","code":"#----------------------------------------------------# #---Correcting support sets in a derivative matrix---# #----------------------------------------------------# n=20; k=3; xi=seq(0,1,by=1/(n+1)) #an even number of equally spaced knots  set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S) #this spline will be used below to construct a 'sparse' spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.303131 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM . is.splinets(spl) #verification #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 22 equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 3  #> Support: The full support range for each spline. #> $Er #> [1] 2.237243e-23 #>  plot(spl)    xxi=seq(0,20,by=1/(n+1)) #large set of knots for construction of a sparse spline  nn=length(xxi)-2 spspl=new('Splinets',knots=xxi,smorder=k) #generic object from the 'Splinets'-class spspl@der[[1]]=matrix(0,ncol=(k+1),nrow=(nn+2)) #starting with zeros everywhere  spspl@der[[1]][1:(n+2),]=sym2one(spl@der[[1]]) #assigning local spline to a sparse spline at  spspl@der[[1]][nn+3-(1:(n+2)),]=spspl@der[[1]][(n+2):1,] #the beginning and the same at the end spspl@der[[1]]=sym2one(spspl@der[[1]],inv=TRUE)                                  #at this point the object does not account for the sparsity  is.splinets(spspl) #a sparse spline on 421 knots with a non-zero terms at the first 22  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 421 equaly distributed knots between 0 and 20  #> Size: 1 spline functions #> Order: 3  #> Support: The full support range for each spline. #> $Er #> [1] 5.319697e-23 #>                     #and at the last 22 knots, the actual support set is not yet reported plot(spspl)  plot(spspl,xlim=c(0,1)) #the local part of the sparse spline   exsupp(spspl@der[[1]]) #the actual support of the spline given the sparse derivative matrix #> $rS #>              [,1]        [,2]          [,3]          [,4] #>  [1,]  0.00000000   0.0000000    0.00000000 -7.024458e+03 #>  [2,] -0.12641647  -7.9642378 -334.49798786  1.469705e+04 #>  [3,] -0.62041814  -7.2293915  365.36153367 -7.687523e+03 #>  [4,] -0.68878219   1.4527638   -0.71101105 -2.796661e-01 #>  [5,] -0.62041412   1.4185891   -0.72432849 -9.844306e+02 #>  [6,] -0.57139992   0.2679628  -47.60197450  1.003237e+03 #>  [7,] -0.59455541  -0.8613413    0.17120093  3.470285e-01 #>  [8,] -0.63537131  -0.8527954    0.18772610  7.557291e+03 #>  [9,] -0.53976211   7.7245010  360.05872310 -1.397604e+04 #> [10,] -0.01522038   9.0243000 -305.46716206  6.403647e+03 #> [11,]  0.18341751   1.7386151   -0.53160753  5.472878e-01 #> [12,]  0.26561582   1.7139209   -0.50554621  5.472878e-01 #> [13,]  0.10491122 -13.5401950 -640.16732427 -1.343290e+04 #> [14,] -0.80330481 -14.8951404  583.25961806  2.569197e+04 #> [15,] -1.07176004  -1.0095326   -0.06409093 -1.224980e+04 #> [16,] -1.11993704  -1.0145600   -0.14705771 -1.742302e+00 #> [17,] -1.16157407  -0.5905113   17.95710289  3.801874e+02 #> [18,] -1.17579757  -0.1426081    0.85483042 -3.591477e+02 #> [19,] -1.18160708  -0.1011358    0.88700587  6.756845e-01 #> [20,] -0.98749213  12.4103942  524.59725595  1.099792e+04 #> [21,] -0.19762544  12.4504025 -522.91690639 -2.199780e+04 #> [22,]  0.00000000   0.0000000    0.00000000  1.098126e+04 #> [23,]  0.00000000   0.0000000    0.00000000 -7.024458e+03 #> [24,] -0.12641647  -7.9642378 -334.49798786  1.469705e+04 #> [25,] -0.62041814  -7.2293915  365.36153367 -7.687523e+03 #> [26,] -0.68878219   1.4527638   -0.71101105 -2.796661e-01 #> [27,] -0.62041412   1.4185891   -0.72432849 -9.844306e+02 #> [28,] -0.57139992   0.2679628  -47.60197450  1.003237e+03 #> [29,] -0.59455541  -0.8613413    0.17120093  3.470285e-01 #> [30,] -0.63537131  -0.8527954    0.18772610  7.557291e+03 #> [31,] -0.53976211   7.7245010  360.05872310 -1.397604e+04 #> [32,] -0.01522038   9.0243000 -305.46716206  6.403647e+03 #> [33,]  0.18341751   1.7386151   -0.53160753  5.472878e-01 #> [34,]  0.26561582   1.7139209   -0.50554621  5.472878e-01 #> [35,]  0.10491122 -13.5401950 -640.16732427 -1.343290e+04 #> [36,] -0.80330481 -14.8951404  583.25961806  2.569197e+04 #> [37,] -1.07176004  -1.0095326   -0.06409093 -1.224980e+04 #> [38,] -1.11993704  -1.0145600   -0.14705771 -1.742302e+00 #> [39,] -1.16157407  -0.5905113   17.95710289  3.801874e+02 #> [40,] -1.17579757  -0.1426081    0.85483042 -3.591477e+02 #> [41,] -1.18160708  -0.1011358    0.88700587  6.756845e-01 #> [42,] -0.98749213  12.4103942  524.59725595  1.099792e+04 #> [43,] -0.19762544  12.4504025 -522.91690639 -2.199780e+04 #> [44,]  0.00000000   0.0000000    0.00000000  1.098126e+04 #>  #> $rsupp #>      [,1] [,2] #> [1,]    1   22 #> [2,]  400  421 #>   #Expanding the previous spline by building a slightly more complex support set spspl@der[[1]][(n+1)+(1:(n+2)),]=sym2one(spl@der[[1]]) #double the first component of the                                               #support because these are tangent supports  spspl@der[[1]][(2*n+3)+(1:(n+2)),]=sym2one(spl@der[[1]]) #tdetect a single component of                                                 #the support with no internal knots removed is.splinets(spspl) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 421 equaly distributed knots between 0 and 20  #> Size: 1 spline functions #> Order: 3  #> Support: The full support range for each spline. #> $Er #> [1] 1.105124e-22 #>  plot(spspl)    es=exsupp(spspl@der[[1]]) es[[2]]   #the new support made of three components with the two first ones #>      [,1] [,2] #> [1,]    1   43 #> [2,]   44   65 #> [3,]  400  421           #separated by an interval with no knots in it              spspl@der[[1]]=es[[1]]         #defining the spline on the evaluated actual support spspl@supp[[1]]=es[[2]] #Example with reduction of not a full support.   xi1=seq(0,14/(n+1),by=1/(n+1)); n1=13; #the odd number of equally spaced knots  S1=matrix(rnorm((n1+2)*(k+1)),ncol=(k+1)) spl1=construct(xi1,k,S1) #construction of a local spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.736963 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM . xi2=seq(16/(n+1),42/(n+1),by=1/(n+1)); n2=25; #the odd number of equally spaced knots   S2=matrix(rnorm((n2+2)*(k+1)),ncol=(k+1)) spl2=construct(xi2,k,S2) #construction of a local spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.455238 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM .  spspl@der[[1]][1:15,]=sym2one(spl1@der[[1]]) spspl@der[[1]][16,]=rep(0,k+1) spspl@der[[1]][17:43,]=sym2one(spl2@der[[1]]) spspl@der[[1]][1:43,]=sym2one(spspl@der[[1]][1:43,],inv=TRUE)  is.splinets(spspl) #three intervals in the support are repported  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 421 equaly distributed knots between 0 and 20  #> Size: 1 spline functions #> Order: 3  #> Support: Not the full range support, the number of support intervals varies from 3 to 3 #> $Er #> [1] 9.544367e-23 #>   exsupp(spspl@der[[1]],spspl@supp[[1]]) #> $rS #>              [,1]         [,2]          [,3]          [,4] #>  [1,]  0.00000000   0.00000000  0.000000e+00  6.962683e+03 #>  [2,]  0.12530473   7.89419798  3.315563e+02 -1.475042e+04 #>  [3,]  0.61167552   6.95876572 -3.708445e+02  7.759770e+03 #>  [4,]  0.66223634  -1.90256943 -1.331607e+00  2.880795e-01 #>  [5,]  0.57013322  -1.96565265 -1.317889e+00  4.792968e+02 #>  [6,]  0.48366223  -1.48498890  2.150577e+01 -4.458285e+02 #>  [7,]  0.42930802  -0.96637928  2.758378e-01  2.991623e-01 #>  [8,]  0.38360809  -0.95290496  2.900836e-01  0.000000e+00 #>  [9,]  0.33856003  -0.93912474  2.886858e-01 -2.935340e-02 #> [10,]  0.30282335  -0.38003459  2.319310e+01  4.809927e+02 #> [11,]  0.30174075   0.13964851 -1.366411e+00 -5.157497e+02 #> [12,]  0.30683597   0.07423548 -1.380937e+00 -3.050486e-01 #> [13,]  0.25744444  -3.22725756 -1.372818e+02 -2.853918e+03 #> [14,]  0.05155453  -3.24793558  1.364133e+02  5.747596e+03 #> [15,]  0.00000000   0.00000000  0.000000e+00 -2.864679e+03 #> [16,]  0.00000000   0.00000000  0.000000e+00  4.687346e+03 #> [17,]  0.08435637   5.31445157  2.232070e+02 -8.463567e+03 #> [18,]  0.43817904   6.34747342 -1.798200e+02  3.797073e+03 #> [19,]  0.60489655   2.08968596  9.929753e-01 -5.580409e-01 #> [20,]  0.70552119   2.13633780  9.664019e-01 -6.264551e-01 #> [21,]  0.80833598   2.18164668  9.365707e-01  2.773512e+03 #> [22,]  0.96319963   5.37081712  1.330086e+02 -7.136497e+03 #> [23,]  1.24132340   3.61329247 -2.068246e+02  4.357275e+03 #> [24,]  1.25730612  -1.29527809  6.646595e-01 -7.460259e-01 #> [25,]  1.19636636  -1.26447348  6.291344e-01  1.014451e+04 #> [26,]  1.31943347  10.26719516  4.837009e+02 -1.942446e+04 #> [27,]  2.00718681  11.27738115 -4.412731e+02  9.257870e+03 #> [28,]  2.21050562   0.76082567 -4.221931e-01 -1.174983e-01 #> [29,]  2.24625462   0.74058802 -4.277882e-01  0.000000e+00 #> [30,]  2.28106217   0.72188489 -3.577435e-01  1.470939e+00 #> [31,]  1.81791045 -30.61381046 -1.315741e+03 -2.762306e+04 #> [32,] -0.14700936 -31.23514937  1.289645e+03  5.471312e+04 #> [33,] -0.65938084  -0.51494299  6.034415e-01 -2.706988e+04 #> [34,] -0.68322103  -0.48641347  5.947985e-01 -1.815019e-01 #> [35,] -0.67200135   1.66550463  8.978576e+01  1.873010e+03 #> [36,] -0.54846294   2.31415415 -6.254248e+01 -3.198893e+03 #> [37,] -0.48567849   0.81621918 -3.707867e-01  1.305606e+03 #> [38,] -0.44723610   0.79826007 -3.834962e-01 -2.668994e-01 #> [39,] -0.40965557   0.78018446 -3.756793e-01  1.641560e-01 #> [40,] -0.31677752   4.29989266  1.482034e+02  3.120161e+03 #> [41,] -0.06213131   3.91427280 -1.643995e+02 -6.564661e+03 #> [42,]  0.00000000   0.00000000  0.000000e+00  3.452389e+03 #> [43,]  0.00000000   0.00000000  0.000000e+00 -7.024458e+03 #> [44,] -0.12641647  -7.96423781 -3.344980e+02  1.469705e+04 #> [45,] -0.62041814  -7.22939148  3.653615e+02 -7.687523e+03 #> [46,] -0.68878219   1.45276382 -7.110111e-01 -2.796661e-01 #> [47,] -0.62041412   1.41858907 -7.243285e-01 -9.844306e+02 #> [48,] -0.57139992   0.26796281 -4.760197e+01  1.003237e+03 #> [49,] -0.59455541  -0.86134132  1.712009e-01  3.470285e-01 #> [50,] -0.63537131  -0.85279544  1.877261e-01  7.557291e+03 #> [51,] -0.53976211   7.72450097  3.600587e+02 -1.397604e+04 #> [52,] -0.01522038   9.02430004 -3.054672e+02  6.403647e+03 #> [53,]  0.18341751   1.73861505 -5.316075e-01  5.472878e-01 #> [54,]  0.26561582   1.71392091 -5.055462e-01  5.472878e-01 #> [55,]  0.10491122 -13.54019505 -6.401673e+02 -1.343290e+04 #> [56,] -0.80330481 -14.89514043  5.832596e+02  2.569197e+04 #> [57,] -1.07176004  -1.00953265 -6.409093e-02 -1.224980e+04 #> [58,] -1.11993704  -1.01455999 -1.470577e-01 -1.742302e+00 #> [59,] -1.16157407  -0.59051130  1.795710e+01  3.801874e+02 #> [60,] -1.17579757  -0.14260813  8.548304e-01 -3.591477e+02 #> [61,] -1.18160708  -0.10113583  8.870059e-01  6.756845e-01 #> [62,] -0.98749213  12.41039421  5.245973e+02  1.099792e+04 #> [63,] -0.19762544  12.45040253 -5.229169e+02 -2.199780e+04 #> [64,]  0.00000000   0.00000000  0.000000e+00  1.098126e+04 #> [65,]  0.00000000   0.00000000  0.000000e+00 -7.024458e+03 #> [66,] -0.12641647  -7.96423781 -3.344980e+02  1.469705e+04 #> [67,] -0.62041814  -7.22939148  3.653615e+02 -7.687523e+03 #> [68,] -0.68878219   1.45276382 -7.110111e-01 -2.796661e-01 #> [69,] -0.62041412   1.41858907 -7.243285e-01 -9.844306e+02 #> [70,] -0.57139992   0.26796281 -4.760197e+01  1.003237e+03 #> [71,] -0.59455541  -0.86134132  1.712009e-01  3.470285e-01 #> [72,] -0.63537131  -0.85279544  1.877261e-01  7.557291e+03 #> [73,] -0.53976211   7.72450097  3.600587e+02 -1.397604e+04 #> [74,] -0.01522038   9.02430004 -3.054672e+02  6.403647e+03 #> [75,]  0.18341751   1.73861505 -5.316075e-01  5.472878e-01 #> [76,]  0.26561582   1.71392091 -5.055462e-01  5.472878e-01 #> [77,]  0.10491122 -13.54019505 -6.401673e+02 -1.343290e+04 #> [78,] -0.80330481 -14.89514043  5.832596e+02  2.569197e+04 #> [79,] -1.07176004  -1.00953265 -6.409093e-02 -1.224980e+04 #> [80,] -1.11993704  -1.01455999 -1.470577e-01 -1.742302e+00 #> [81,] -1.16157407  -0.59051130  1.795710e+01  3.801874e+02 #> [82,] -1.17579757  -0.14260813  8.548304e-01 -3.591477e+02 #> [83,] -1.18160708  -0.10113583  8.870059e-01  6.756845e-01 #> [84,] -0.98749213  12.41039421  5.245973e+02  1.099792e+04 #> [85,] -0.19762544  12.45040253 -5.229169e+02 -2.199780e+04 #> [86,]  0.00000000   0.00000000  0.000000e+00  1.098126e+04 #>  #> $rsupp #>      [,1] [,2] #> [1,]    1   15 #> [2,]   17   43 #> [3,]   44   65 #> [4,]  400  421 #>"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gather.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining two Splinets objects — gather","title":"Combining two Splinets objects — gather","text":"function returns Splinets-object gathers two input Splinets-objects together. input objects order knots.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining two Splinets objects — gather","text":"","code":"gather(Sp1, Sp2)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining two Splinets objects — gather","text":"Sp1 Splinets object; Sp2 Splinets object;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining two Splinets objects — gather","text":"Splinets object, contains grouped splines input objects;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gather.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Combining two Splinets objects — gather","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gather.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining two Splinets objects — gather","text":"","code":"#-------------------------------------------------------------# #-----------------Grouping into a 'Splinets' object-----------# #-------------------------------------------------------------# #Gathering three 'Splinets' objects using three different #method to correct the derivative matrix set.seed(5) n=13;xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1; k=4 S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))  spl=construct(xi,k,S) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.421221 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . spl=gather(spl,construct(xi,k,S,mthd='CRFC')) #the second and the first ones #>  #> Using  method CRFC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.421221 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRFC . spl=gather(spl,construct(xi,k,S,mthd='CRLC')) #the third is added #>  #> Using  method CRLC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.421221 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRLC .  is.splinets(spl)[[1]] #diagnostic #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #>  #> The derivative matrix for spline 2 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 2.100912e-07 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> [1] FALSE spl@supp #the entire range for the support #> list()  #Example with different support ranges, the 3rd order set.seed(5) n=25; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1; k=3 supp=list(t(c(2,12)),t(c(4,20)),t(c(6,25))) #support ranges for three splines  #Initial random matrices of the derivative for each spline SS1=matrix(rnorm((supp[[1]][1,2]-supp[[1]][1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[[2]][1,2]-supp[[2]][1,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[[3]][1,2]-supp[[3]][1,1]+1)*(k+1)),ncol=(k+1))   spl=construct(xi,k,SS1,supp[[1]]) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.502577 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[[2]]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.705421 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the second and the first ones nspl=construct(xi,k,SS3,supp[[3]]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.573415 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the third is added is.splinets(spl)[[1]] #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> [1] TRUE  spl@supp #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[2]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[3]] #>      [,1] [,2] #> [1,]    6   25 #>  spl@der #> [[1]] #>             [,1]       [,2]         [,3]          [,4] #>  [1,] 0.00000000  0.0000000    0.0000000  7.376173e+03 #>  [2,] 0.03165921  3.2162362  217.8233855 -9.462063e+03 #>  [3,] 0.27589971 -0.8270676 -352.0838223  2.125572e+05 #>  [4,] 0.27420288 -1.1186648    0.9223759 -1.112723e-01 #>  [5,] 0.26365595 -1.1099394    0.9213227  5.850208e-01 #>  [6,] 0.24779384 -1.0966331    0.9297336  0.000000e+00 #>  [7,] 0.20798455 -1.0625232    0.9202542 -2.570614e-01 #>  [8,] 0.19667686 -1.0526812    0.9207778  4.896542e-02 #>  [9,] 0.18172825 -1.9346457 -159.6258732 -1.444478e+04 #> [10,] 0.07179023 -3.1158175   90.1545008  7.345496e+03 #> [11,] 0.00000000  0.0000000    0.0000000 -1.304286e+03 #>  #> [[2]] #>               [,1]        [,2]          [,3]          [,4] #>  [1,]  0.000000000   0.0000000  0.000000e+00  1.462326e+07 #>  [2,]  0.011163811  20.1663459  2.428570e+04 -3.767611e+06 #>  [3,]  0.757428221  81.2667804 -1.137497e+04  7.912416e+05 #>  [4,]  1.142096526  -0.4971283  7.211323e-01 -7.157829e-01 #>  [5,]  1.124248824  -0.4710226  6.947372e-01 -9.546746e+05 #>  [6,]  0.924780073 -55.0303220 -1.020651e+04  1.365346e+06 #>  [7,] -0.004834481 -84.1384399  4.968645e+03 -1.461014e+05 #>  [8,] -0.950724335   0.3489009  5.314578e-01 -1.380929e+00 #>  [9,] -0.925414106   0.3823373  4.360056e-01  0.000000e+00 #> [10,] -0.905819360   0.4028189  3.851283e-01 -1.019869e+00 #> [11,] -0.448346629  31.4768554  1.461854e+03  3.438589e+04 #> [12,] -0.091871178  30.1944274 -1.703836e+03 -2.986684e+05 #> [13,]  0.242195051  -1.7239825 -8.981582e-01  4.547622e+04 #> [14,]  0.195393804  -1.7472843 -8.302975e-01  2.516846e+00 #> [15,]  0.187932242  -1.7703135 -1.000628e+01 -2.158916e+03 #> [16,]  0.001415052  -0.2680215  3.384352e+01  3.478879e+02 #> [17,]  0.000000000   0.0000000  0.000000e+00 -2.136739e+03 #>  #> [[3]] #>                [,1]       [,2]          [,3]          [,4] #>  [1,]  0.0000000000  0.0000000     0.0000000 -7.113758e+04 #>  [2,] -0.0352333701 -7.3520195 -1022.7461681  5.666283e+04 #>  [3,] -0.5281669971 -6.5407974  1066.7436463 -9.980994e+04 #>  [4,] -0.5574594866 -0.8402538    -0.4053771 -3.358705e-01 #>  [5,] -0.5668236098 -0.8447802    -0.4091101  4.559846e+00 #>  [6,] -0.5957566354 -0.8560555    -0.2540546 -6.354459e-01 #>  [7,] -0.6555705573 -0.8751342    -0.2979777  7.887325e+03 #>  [8,] -0.5363993894  8.9242946   393.1699923 -2.446686e+04 #>  [9,] -0.1150638602  3.5360923  -646.7205569  6.104205e+04 #> [10,] -0.1017971062  0.1101963     0.2853175  1.081431e+00 #> [11,] -0.0974611000  0.1216387     0.3258136  1.081431e+00 #> [12,] -0.1001082101 -0.5422015   -49.5674319 -1.850463e+03 #> [13,] -0.1027584500 -0.6808970   -15.6968236  7.969044e+03 #> [14,] -0.2755217830 -1.7608660    -1.4393172  1.131137e+02 #> [15,] -0.3035930998 -1.7837882    -1.4551026 -9.966184e-01 #> [16,] -0.3387884854 -1.7932483     0.4919197  9.911783e+01 #> [17,] -0.4936086568 -1.7592515     0.2875176 -2.343141e+00 #> [18,] -0.4452279029  7.7520301   555.2101074  1.620487e+04 #> [19,] -0.0007748643  0.9945450  -851.0047201 -3.077704e+04 #> [20,]  0.0000000000  0.0000000     0.0000000  3.640906e+05 #>"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gramian.html","id":null,"dir":"Reference","previous_headings":"","what":"Gramian matrix, norms, and inner products of splines — gramian","title":"Gramian matrix, norms, and inner products of splines — gramian","text":"function performs evaluation matrix inner products \\(\\int S(t) \\cdot T(t) dt \\) pairs splines \\(S\\), \\(T\\) input object. program utilizes Taylor expansion splines, see reference details.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gramian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gramian matrix, norms, and inner products of splines — gramian","text":"","code":"gramian(Sp, norm_only = FALSE, sID = NULL, Sp2 = NULL, s2ID = NULL)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gramian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gramian matrix, norms, and inner products of splines — gramian","text":"Sp Splinets object; norm_only logical, indicates square norm elements input object calculated; default norm_only=FALSE; sID vector integers, indicies specifying splines Splinets list Sp evaluated; sID=NULL (default), inner products pairs taken object evaluated. Sp2 Splinets object, optional second  Splinets-object; inner products splines Sp Sp2 evaluated, .e. cross-gramian matrix. s2ID vector integers, indicies specifying splines Sp2 considered cross-gramian;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gramian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gramian matrix, norms, and inner products of splines — gramian","text":"norm_only=FALSE – Gram matrix inner products splines within input Splinets-objects returned, Sp2 = NULL – non-negative definite matrix inner products splines Sp returned, Sp Sp2 non-NULL contain splines \\(S_i\\)'s \\(T_j\\)'s, respectively == cross-gramian matris inner products pairs splines \\((S_i,T_j)\\) returned, norm_only=FALSE– vector norms Sp returned.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gramian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gramian matrix, norms, and inner products of splines — gramian","text":"one input Splinet-object, non-negative symmetrix matrix splines object returned. two input Splinet-objects, \\(m \\times r\\) matrix cross-inner product returned, \\(m\\) number splines first object \\(r\\) number second one. norms evaluated (norm_only= TRUE) always evaluating norms first object. case two input Splinets-objects, set knots smoothness order.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gramian.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gramian matrix, norms, and inner products of splines — gramian","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/gramian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gramian matrix, norms, and inner products of splines — gramian","text":"","code":"#---------------------------------------# #---- Simple three splines example -----#  #---------------------------------------# n=25; k=3 xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1 #Defining support ranges for three splines supp=matrix(c(2,12,4,20,6,25),byrow=TRUE,ncol=2) #Initial random matrices of the derivative for each spline SS1=matrix(rnorm((supp[1,2]-supp[1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[2,2]-supp[2,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[3,2]-supp[3,1]+1)*(k+1)),ncol=(k+1))  spl=construct(xi,k,SS1,supp[1,]) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.418853 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[2,]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.291063 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the second and the first ones nspl=construct(xi,k,SS3,supp[3,]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.476759 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the third is added  plot(spl)  gramian(spl) #>            [,1]        [,2]        [,3] #> [1,]  0.6529948  0.24933900 -0.10598721 #> [2,]  0.2493390  0.21677143 -0.02862501 #> [3,] -0.1059872 -0.02862501  0.43189486 gramian(spl, norm_only = TRUE) #> [1] 0.6529948 0.2167714 0.4318949 gramian(spl, sID = c(1,3)) #>            [,1]       [,2] #> [1,]  0.6529948 -0.1059872 #> [2,] -0.1059872  0.4318949 gramian(spl,sID=c(2,3),Sp2=spl,s2ID=c(1)) #the cross-Gramian matrix   #>            [,1] #> [1,]  0.2493390 #> [2,] -0.1059872  #-----------------------------------------# #--- Example with varying support sets ---# #-----------------------------------------# n=40; xi=seq(0,1,by=1/(n+1)); k=2;  support=list(matrix(c(2,9,15,24,30,37),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random sp1 = is.splinets(sp)[[2]] #the correction of 'der' matrices #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.613142 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 2 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 2 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.457952 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 3 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 3 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.458022 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method.  support=list(matrix(c(5,12,17,29),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random sp2 = is.splinets(sp)[[2]]  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.546269 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 support 2 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 2 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.853498 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method.  spp = gather(sp1,sp2)  support=list(matrix(c(3,10,14,21,27,34),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random sp3 = is.splinets(sp)[[2]]  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.432885 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 2 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 2 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 0.8928797 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 3 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 3 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.216008 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method.  spp = gather(spp, sp3)  plot(spp)  gramian(spp) #the regular gramian matrix #>              [,1]         [,2]         [,3] #> [1,]  0.184674517 -0.035625141  0.002490996 #> [2,] -0.035625141  0.250416141 -0.006716441 #> [3,]  0.002490996 -0.006716441  0.005898704 spp2=subsample(spp,sample(1:3,size=3,rep=TRUE)) gramian(Sp=spp,Sp2=spp2) #cross-Gramian matrix #>              [,1]         [,2]         [,3] #> [1,] -0.035625141  0.184674517 -0.035625141 #> [2,]  0.250416141 -0.035625141  0.250416141 #> [3,] -0.006716441  0.002490996 -0.006716441   #-----------------------------------------# #--------- Grammian for B-splines --------# #-----------------------------------------#  n=25; xi=seq(0,1,by=1/(n+1)); k=2;  Sp=splinet(xi) #B-splines and corresponding splinet  gramian(Sp$bs) #band grammian matrix for B-splines #>               [,1]         [,2]         [,3]         [,4]         [,5] #>  [1,] 1.843712e-02 9.088828e-03 9.157509e-04 7.631258e-06 0.000000e+00 #>  [2,] 9.088828e-03 1.843712e-02 9.088828e-03 9.157509e-04 7.631258e-06 #>  [3,] 9.157509e-04 9.088828e-03 1.843712e-02 9.088828e-03 9.157509e-04 #>  [4,] 7.631258e-06 9.157509e-04 9.088828e-03 1.843712e-02 9.088828e-03 #>  [5,] 0.000000e+00 7.631258e-06 9.157509e-04 9.088828e-03 1.843712e-02 #>  [6,] 0.000000e+00 0.000000e+00 7.631258e-06 9.157509e-04 9.088828e-03 #>  [7,] 0.000000e+00 0.000000e+00 0.000000e+00 7.631258e-06 9.157509e-04 #>  [8,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.631258e-06 #>  [9,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [10,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [11,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [12,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [13,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [14,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [15,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [16,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [17,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [18,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [19,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [20,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [21,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [22,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [23,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>               [,6]         [,7]         [,8]         [,9]        [,10] #>  [1,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [2,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [3,] 7.631258e-06 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [4,] 9.157509e-04 7.631258e-06 0.000000e+00 0.000000e+00 0.000000e+00 #>  [5,] 9.088828e-03 9.157509e-04 7.631258e-06 0.000000e+00 0.000000e+00 #>  [6,] 1.843712e-02 9.088828e-03 9.157509e-04 7.631258e-06 0.000000e+00 #>  [7,] 9.088828e-03 1.843712e-02 9.088828e-03 9.157509e-04 7.631258e-06 #>  [8,] 9.157509e-04 9.088828e-03 1.843712e-02 9.088828e-03 9.157509e-04 #>  [9,] 7.631258e-06 9.157509e-04 9.088828e-03 1.843712e-02 9.088828e-03 #> [10,] 0.000000e+00 7.631258e-06 9.157509e-04 9.088828e-03 1.843712e-02 #> [11,] 0.000000e+00 0.000000e+00 7.631258e-06 9.157509e-04 9.088828e-03 #> [12,] 0.000000e+00 0.000000e+00 0.000000e+00 7.631258e-06 9.157509e-04 #> [13,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.631258e-06 #> [14,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [15,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [16,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [17,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [18,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [19,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [20,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [21,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [22,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [23,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>              [,11]        [,12]        [,13]        [,14]        [,15] #>  [1,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [2,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [3,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [4,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [5,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [6,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [7,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [8,] 7.631258e-06 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [9,] 9.157509e-04 7.631258e-06 0.000000e+00 0.000000e+00 0.000000e+00 #> [10,] 9.088828e-03 9.157509e-04 7.631258e-06 0.000000e+00 0.000000e+00 #> [11,] 1.843712e-02 9.088828e-03 9.157509e-04 7.631258e-06 0.000000e+00 #> [12,] 9.088828e-03 1.843712e-02 9.088828e-03 9.157509e-04 7.631258e-06 #> [13,] 9.157509e-04 9.088828e-03 1.843712e-02 9.088828e-03 9.157509e-04 #> [14,] 7.631258e-06 9.157509e-04 9.088828e-03 1.843712e-02 9.088828e-03 #> [15,] 0.000000e+00 7.631258e-06 9.157509e-04 9.088828e-03 1.843712e-02 #> [16,] 0.000000e+00 0.000000e+00 7.631258e-06 9.157509e-04 9.088828e-03 #> [17,] 0.000000e+00 0.000000e+00 0.000000e+00 7.631258e-06 9.157509e-04 #> [18,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.631258e-06 #> [19,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [20,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [21,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [22,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [23,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>              [,16]        [,17]        [,18]        [,19]        [,20] #>  [1,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [2,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [3,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [4,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [5,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [6,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [7,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [8,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #>  [9,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [10,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [11,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [12,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [13,] 7.631258e-06 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 #> [14,] 9.157509e-04 7.631258e-06 0.000000e+00 0.000000e+00 0.000000e+00 #> [15,] 9.088828e-03 9.157509e-04 7.631258e-06 0.000000e+00 0.000000e+00 #> [16,] 1.843712e-02 9.088828e-03 9.157509e-04 7.631258e-06 0.000000e+00 #> [17,] 9.088828e-03 1.843712e-02 9.088828e-03 9.157509e-04 7.631258e-06 #> [18,] 9.157509e-04 9.088828e-03 1.843712e-02 9.088828e-03 9.157509e-04 #> [19,] 7.631258e-06 9.157509e-04 9.088828e-03 1.843712e-02 9.088828e-03 #> [20,] 0.000000e+00 7.631258e-06 9.157509e-04 9.088828e-03 1.843712e-02 #> [21,] 0.000000e+00 0.000000e+00 7.631258e-06 9.157509e-04 9.088828e-03 #> [22,] 0.000000e+00 0.000000e+00 0.000000e+00 7.631258e-06 9.157509e-04 #> [23,] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 7.631258e-06 #>              [,21]        [,22]        [,23] #>  [1,] 0.000000e+00 0.000000e+00 0.000000e+00 #>  [2,] 0.000000e+00 0.000000e+00 0.000000e+00 #>  [3,] 0.000000e+00 0.000000e+00 0.000000e+00 #>  [4,] 0.000000e+00 0.000000e+00 0.000000e+00 #>  [5,] 0.000000e+00 0.000000e+00 0.000000e+00 #>  [6,] 0.000000e+00 0.000000e+00 0.000000e+00 #>  [7,] 0.000000e+00 0.000000e+00 0.000000e+00 #>  [8,] 0.000000e+00 0.000000e+00 0.000000e+00 #>  [9,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [10,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [11,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [12,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [13,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [14,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [15,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [16,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [17,] 0.000000e+00 0.000000e+00 0.000000e+00 #> [18,] 7.631258e-06 0.000000e+00 0.000000e+00 #> [19,] 9.157509e-04 7.631258e-06 0.000000e+00 #> [20,] 9.088828e-03 9.157509e-04 7.631258e-06 #> [21,] 1.843712e-02 9.088828e-03 9.157509e-04 #> [22,] 9.088828e-03 1.843712e-02 9.088828e-03 #> [23,] 9.157509e-04 9.088828e-03 1.843712e-02 gramian(Sp$os) #diagonal gramian matrix for the splinet #>                [,1]          [,2]          [,3]          [,4]          [,5] #>  [1,]  1.000000e+00 -5.596038e-16 -2.609887e-16 -3.798495e-16  1.043450e-16 #>  [2,] -5.596038e-16  1.000000e+00  3.814427e-16  3.238809e-17  2.043698e-17 #>  [3,] -2.609887e-16  3.814427e-16  1.000000e+00 -8.477328e-16  2.187079e-16 #>  [4,] -3.798495e-16  3.238809e-17 -8.477328e-16  1.000000e+00 -5.761791e-16 #>  [5,]  1.043450e-16  2.043698e-17  2.187079e-16 -5.761791e-16  1.000000e+00 #>  [6,]  5.528522e-16 -3.188186e-17 -6.221949e-16  2.516825e-16 -5.536149e-16 #>  [7,] -1.364130e-17 -8.591478e-19 -4.894808e-17  4.110375e-17 -2.269577e-17 #>  [8,] -1.956173e-17  0.000000e+00  0.000000e+00  0.000000e+00  4.364782e-18 #>  [9,]  1.077349e-17  0.000000e+00  0.000000e+00  0.000000e+00 -2.044905e-17 #> [10,] -2.139122e-18  0.000000e+00  0.000000e+00  0.000000e+00 -4.452504e-18 #> [11,]  4.329480e-18 -2.849605e-18 -6.941719e-19 -3.540586e-17 -2.260428e-17 #> [12,]  9.981672e-18 -3.958199e-18  1.834303e-17  4.468800e-18  6.018597e-18 #> [13,] -1.629385e-19  8.843864e-20 -5.010109e-19  3.526881e-19 -3.690355e-19 #> [14,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [15,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [16,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [17,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [18,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [19,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [20,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [21,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [22,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [23,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>                [,6]          [,7]          [,8]          [,9]         [,10] #>  [1,]  5.528522e-16 -1.364130e-17 -1.956173e-17  1.077349e-17 -2.139122e-18 #>  [2,] -3.188186e-17 -8.591478e-19  0.000000e+00  0.000000e+00  0.000000e+00 #>  [3,] -6.221949e-16 -4.894808e-17  0.000000e+00  0.000000e+00  0.000000e+00 #>  [4,]  2.516825e-16  4.110375e-17  0.000000e+00  0.000000e+00  0.000000e+00 #>  [5,] -5.536149e-16 -2.269577e-17  4.364782e-18 -2.044905e-17 -4.452504e-18 #>  [6,]  1.000000e+00  8.738147e-16 -3.272195e-16 -3.536276e-17 -2.791678e-17 #>  [7,]  8.738147e-16  1.000000e+00 -4.017155e-16  7.103781e-16 -5.688212e-17 #>  [8,] -3.272195e-16 -4.017155e-16  1.000000e+00  2.458533e-17  6.615055e-18 #>  [9,] -3.536276e-17  7.103781e-16  2.458533e-17  1.000000e+00 -2.529704e-16 #> [10,] -2.791678e-17 -5.688212e-17  6.615055e-18 -2.529704e-16  1.000000e+00 #> [11,] -2.718100e-16  3.025570e-16 -7.113632e-18  1.087077e-15 -1.400184e-15 #> [12,]  5.664200e-17 -1.267454e-16  2.024615e-17 -5.402578e-16  1.718297e-16 #> [13,]  7.937923e-19  6.642628e-18 -1.432033e-18 -4.806067e-17  2.298509e-17 #> [14,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [15,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [16,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [17,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [18,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [19,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [20,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [21,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [22,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [23,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>               [,11]         [,12]         [,13]         [,14]         [,15] #>  [1,]  4.329480e-18  9.981672e-18 -1.629385e-19  0.000000e+00  0.000000e+00 #>  [2,] -2.849605e-18 -3.958199e-18  8.843864e-20  0.000000e+00  0.000000e+00 #>  [3,] -6.941719e-19  1.834303e-17 -5.010109e-19  0.000000e+00  0.000000e+00 #>  [4,] -3.540586e-17  4.468800e-18  3.526881e-19  0.000000e+00  0.000000e+00 #>  [5,] -2.260428e-17  6.018597e-18 -3.690355e-19  0.000000e+00  0.000000e+00 #>  [6,] -2.718100e-16  5.664200e-17  7.937923e-19  0.000000e+00  0.000000e+00 #>  [7,]  3.025570e-16 -1.267454e-16  6.642628e-18  0.000000e+00  0.000000e+00 #>  [8,] -7.113632e-18  2.024615e-17 -1.432033e-18  0.000000e+00  0.000000e+00 #>  [9,]  1.087077e-15 -5.402578e-16 -4.806067e-17  0.000000e+00  0.000000e+00 #> [10,] -1.400184e-15  1.718297e-16  2.298509e-17  0.000000e+00  0.000000e+00 #> [11,]  1.000000e+00 -2.437609e-15 -2.325477e-16 -6.938885e-18 -4.112178e-17 #> [12,] -2.437609e-15  1.000000e+00  2.939043e-15 -4.150024e-16 -1.222252e-15 #> [13,] -2.325477e-16  2.939043e-15  1.000000e+00 -8.767934e-16  6.588478e-16 #> [14,] -6.938885e-18 -4.150024e-16 -8.767934e-16  1.000000e+00 -2.688308e-16 #> [15,] -4.112178e-17 -1.222252e-15  6.588478e-16 -2.688308e-16  1.000000e+00 #> [16,]  2.656958e-18  1.808320e-16 -5.469462e-17  3.040555e-17  1.118171e-16 #> [17,] -8.969883e-18 -1.901868e-16  5.880429e-16 -2.095378e-16  5.041938e-16 #> [18,]  2.507992e-17 -3.058981e-17 -5.969468e-16  1.088786e-16 -1.193167e-15 #> [19,] -2.475485e-18 -3.164968e-17  3.786323e-17  5.088476e-18 -4.002665e-17 #> [20,]  1.467867e-18  1.413369e-17 -2.797133e-17  0.000000e+00  0.000000e+00 #> [21,] -1.771076e-18 -5.199643e-18  1.318362e-17  0.000000e+00  0.000000e+00 #> [22,]  4.003676e-20 -6.498330e-18  1.363294e-18  0.000000e+00  0.000000e+00 #> [23,] -1.340072e-18 -8.852469e-18  4.329480e-18  6.488259e-19  3.456399e-17 #>               [,16]         [,17]         [,18]         [,19]         [,20] #>  [1,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [2,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [3,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [4,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [6,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [7,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [8,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [9,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [10,]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> [11,]  2.656958e-18 -8.969883e-18  2.507992e-17 -2.475485e-18  1.467867e-18 #> [12,]  1.808320e-16 -1.901868e-16 -3.058981e-17 -3.164968e-17  1.413369e-17 #> [13,] -5.469462e-17  5.880429e-16 -5.969468e-16  3.786323e-17 -2.797133e-17 #> [14,]  3.040555e-17 -2.095378e-16  1.088786e-16  5.088476e-18  0.000000e+00 #> [15,]  1.118171e-16  5.041938e-16 -1.193167e-15 -4.002665e-17  0.000000e+00 #> [16,]  1.000000e+00 -1.400200e-16  4.499366e-16 -1.099991e-17  0.000000e+00 #> [17,] -1.400200e-16  1.000000e+00 -1.283190e-15  1.478028e-16 -6.848967e-18 #> [18,]  4.499366e-16 -1.283190e-15  1.000000e+00 -8.073802e-16  5.054478e-16 #> [19,] -1.099991e-17  1.478028e-16 -8.073802e-16  1.000000e+00 -7.665030e-16 #> [20,]  0.000000e+00 -6.848967e-18  5.054478e-16 -7.665030e-16  1.000000e+00 #> [21,]  0.000000e+00 -1.821870e-17 -1.161446e-15  5.200541e-16 -4.195039e-16 #> [22,]  0.000000e+00 -1.176312e-17 -1.191137e-16  1.611974e-16 -2.649931e-16 #> [23,] -2.823535e-17  5.178255e-17 -9.062980e-16  2.074371e-16  1.269364e-17 #>               [,21]         [,22]         [,23] #>  [1,]  0.000000e+00  0.000000e+00  0.000000e+00 #>  [2,]  0.000000e+00  0.000000e+00  0.000000e+00 #>  [3,]  0.000000e+00  0.000000e+00  0.000000e+00 #>  [4,]  0.000000e+00  0.000000e+00  0.000000e+00 #>  [5,]  0.000000e+00  0.000000e+00  0.000000e+00 #>  [6,]  0.000000e+00  0.000000e+00  0.000000e+00 #>  [7,]  0.000000e+00  0.000000e+00  0.000000e+00 #>  [8,]  0.000000e+00  0.000000e+00  0.000000e+00 #>  [9,]  0.000000e+00  0.000000e+00  0.000000e+00 #> [10,]  0.000000e+00  0.000000e+00  0.000000e+00 #> [11,] -1.771076e-18  4.003676e-20 -1.340072e-18 #> [12,] -5.199643e-18 -6.498330e-18 -8.852469e-18 #> [13,]  1.318362e-17  1.363294e-18  4.329480e-18 #> [14,]  0.000000e+00  0.000000e+00  6.488259e-19 #> [15,]  0.000000e+00  0.000000e+00  3.456399e-17 #> [16,]  0.000000e+00  0.000000e+00 -2.823535e-17 #> [17,] -1.821870e-17 -1.176312e-17  5.178255e-17 #> [18,] -1.161446e-15 -1.191137e-16 -9.062980e-16 #> [19,]  5.200541e-16  1.611974e-16  2.074371e-16 #> [20,] -4.195039e-16 -2.649931e-16  1.269364e-17 #> [21,]  1.000000e+00  1.118171e-16  8.650947e-16 #> [22,]  1.118171e-16  1.000000e+00 -2.661877e-16 #> [23,]  8.650947e-16 -2.661877e-16  1.000000e+00 A=gramian(Sp=Sp$bs,Sp2=Sp$os) #cross-Gramian matrix, the coefficients of                               #the decomposition of the B-splines  plot(Sp$bs)  plot(lincomb(Sp$os,A))"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/integra.html","id":null,"dir":"Reference","previous_headings":"","what":"Indefinite integrals of splines — integra","title":"Indefinite integrals of splines — integra","text":"function generates indefinite integrals given input splines. integral function upper limit definite integral spline higher order satisfy zero boundary conditions RHS endpoint, unless definite integral whole range equal zero. Moreover, support function extended RHS RHS end point unless definite integral input zero, case support extracted obtained spline.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/integra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indefinite integrals of splines — integra","text":"","code":"integra(object, epsilon = 1e-07)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/integra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indefinite integrals of splines — integra","text":"object Splinets object smoothness order k; epsilon non-negative number indicating accuracy close zero value detected; accuracy used boundary conditions integral checked.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/integra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indefinite integrals of splines — integra","text":"Splinets-object order k+1 contains indefinite integrals input object.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/integra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indefinite integrals of splines — integra","text":"value RHS zero, zero boundary condition typically satisfied support extended RHS end whole domain splines. However, function returns proper support original spline derivative spline satisfies boundary conditons.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/integra.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Indefinite integrals of splines — integra","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/integra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indefinite integrals of splines — integra","text":"","code":"#------------------------------------# #--- Generate indefinite integral ---# #------------------------------------# n=18; k=3; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1 # generate a random matrix S set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S) #constructing a spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> The spline 1 'ths highest derivative at the two central knots has been made equal by averaging SLOT 'der'. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.292652 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . plot(spl)   dspl = deriva(spl) #derivative plot(dspl)  is.splinets(dspl) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 20 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 2  #> Support: Not the full range support, a single support interval for each spline. #> $Er #> [1] 1.059186e-20 #>  dintegra(dspl) #the definite integral is 0 (the boundary conditions for 'spl') #>      Spline ID    dIntegral #> [1,]         1 1.250736e-15  ispl = integra(spl) #the integral of a spline plot(ispl) #the boundary condition on the rhs not satisfied (non-zero value)  ispl@smorder #> [1] 4 is.splinets(ispl) #the object does not satisfy the boundary condition for the spline #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 0.001738661 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> $is #> [1] FALSE #>  #> $robject #> splines #> Knots: 20 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 4  #> Support: The full support range for each spline. #> $Er #> [1] 0.0002176519 #>   spll = integra(dspl) plot(spll)  is.splinets(spll) #the boundary conditions of the integral of the derivative satisfied. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 20 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 3  #> Support: The full support range for each spline. #> $Er #> [1] 1.059186e-20 #>    #----------------------------------------------# #--- Examples with different support ranges ---# #----------------------------------------------# n=25; k=2;  set.seed(5) xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1 #Defining support ranges for three splines supp=matrix(c(2,12,4,20,6,25),byrow=TRUE,ncol=2) #Initial random matrices of the derivative for each spline SS1=matrix(rnorm((supp[1,2]-supp[1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[2,2]-supp[2,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[3,2]-supp[3,1]+1)*(k+1)),ncol=(k+1))  spl=construct(xi,k,SS1,supp[1,]) #constructing the first proper spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.576956 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 4 knots, the first 1 entries of the 4 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 4 knots, the first 1 entries of the 4 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[2,],'CRFC') #>  #> Using  method CRFC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.33174 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 4 knots, the first 1 entries of the 4 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 4 knots, the first 1 entries of the 4 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method.The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRFC . spl=gather(spl,nspl) #the second and the first together nspl=construct(xi,k,SS3,supp[3,],'CRLC') #>  #> Using  method CRLC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.41863 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method.The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative is not symmetrically defined at the center. #>           The values at the two central knots should be equal. #> The highest order derivative values at the two central knots #>           have been made equal by averaging the two central values. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRLC . spl=gather(spl,nspl) #the third is added  plot(spl)  spl@supp #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[2]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[3]] #>      [,1] [,2] #> [1,]    6   25 #>    dspl = deriva(spl) #derivative of the splines plot(dspl)   dintegra(dspl) #the definite integral over the entire range of knots is zero #>      Spline ID     dIntegral #> [1,]         1 -1.665335e-16 #> [2,]         2 -8.881784e-15 #> [3,]         3 -1.318390e-16  idspl = integra(dspl) #integral of the derivative returns the original splines plot(idspl)  is.splinets(idspl)  #and confirms that the object is a spline with boundary conditions  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 27 non-equaly distributed knots between 0 and 1  #> Size: 3 spline functions #> Order: 2  #> Support: Not the full range support, a single support interval for each spline. #> $Er #> [1] 1.481881e-22 #>                      #satified   idspl@supp #Since integral is taken over a function that integrates to zero over  #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[2]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[3]] #>      [,1] [,2] #> [1,]    6   25 #>  spl@supp  #each of the support interval, the support of all three objects are the same.  #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[2]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[3]] #>      [,1] [,2] #> [1,]    6   25 #>  dspl@supp #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[2]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[3]] #>      [,1] [,2] #> [1,]    6   25 #>   ispl=integra(spl) plot(ispl) #the zero boundary condition at the RHS-end for the splines are not satisfied.  is.splinets(ispl) #thus the object is reported as a non-spline #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 2 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 3 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 0.005288035 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The derivative matrix for spline 2 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 0.4265515 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The derivative matrix for spline 3 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 0.02196226 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #> $is #> [1] FALSE #>  #> $robject #> splines #> Knots: 27 non-equaly distributed knots between 0 and 1  #> Size: 3 spline functions #> Order: 3  #> Support: The full support range for each spline. #> $Er #> [1] 13.68423 #>   plot(deriva(ispl))  displ=deriva(ispl)  displ@supp #Comparison of the supports #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[2]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[3]] #>      [,1] [,2] #> [1,]    6   25 #>  spl@supp    #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[2]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[3]] #>      [,1] [,2] #> [1,]    6   25 #>             #Here the integrals have extended support as it is taken from a function ispl@supp  #that does not integrate to zero. #> list()    #---------------------------------------# #---Example with complicated supports---# #---------------------------------------# n=40; xi=seq(0,1,by=1/(n+1)); k=3;  support=list(matrix(c(2,12,15,27,30,40),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random sp1 = is.splinets(sp)[[2]] #Comparison of the corrected and the original 'der' matrices #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.660117 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 support 2 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 2 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.375712 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 support 3 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 3 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.494706 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method.  support=list(matrix(c(2,13,17,30),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random sp2 = is.splinets(sp)[[2]]  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.679842 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 2 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 2 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.292027 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. sp = gather(sp1,sp2) #a group of two splines plot(sp)   dsp = deriva(sp) #derivative plot(dsp)   spl = integra(dsp) plot(spl) #the spline retrieved  spl@supp  #the supports are retrieved as well #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   15   27 #> [3,]   30   40 #>  #> [[2]] #>      [,1] [,2] #> [1,]    2   13 #> [2,]   17   30 #>  sp@supp #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   15   27 #> [3,]   30   40 #>  #> [[2]] #>      [,1] [,2] #> [1,]    2   13 #> [2,]   17   30 #>  is.splinets(spl) #the proper splinet object that satisfies the boundaries #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 42 equaly distributed knots between 0 and 1  #> Size: 2 spline functions #> Order: 3  #> Support: Not the full range support, the number of support intervals varies from 2 to 3 #> $Er #> [1] 1.220483e-21 #>   ispl = integra(sp) plot(ispl)   ispl@supp #full support shown by empty list in SLOT 'supp' #> list() is.splinets(ispl) #diagnostic confirms no zeros at the boundaries #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 2 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 0.007032306 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix of derivatives at the knots for spline 2 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 0.001073566 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 2  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> $is #> [1] FALSE #>  #> $robject #> splines #> Knots: 42 equaly distributed knots between 0 and 1  #> Size: 2 spline functions #> Order: 4  #> Support: The full support range for each spline. #> $Er #> [1] 0.008096939 #>   spll = deriva(ispl) plot(spll)  spll@supp #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   15   27 #> [3,]   30   40 #>  #> [[2]] #>      [,1] [,2] #> [1,]    2   13 #> [2,]   17   30 #>"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostics of splines — is.splinets,Splinets-method","title":"Diagnostics of splines — is.splinets,Splinets-method","text":"short information added satisfy R-package building requirement, see .splinets actual information.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostics of splines — is.splinets,Splinets-method","text":"","code":"# S4 method for class 'Splinets' is.splinets(object)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostics of splines — is.splinets,Splinets-method","text":"object Splinets object, object diagnosed;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostics of splines and their generic correction — is.splinets","title":"Diagnostics of splines and their generic correction — is.splinets","text":"method performs verification properties SLOTS object belonging Splinets–class. case properties satisfied logical TRUE returned. Otherwise, FALSE returned together suggested corrections.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostics of splines and their generic correction — is.splinets","text":"","code":"is.splinets(object)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostics of splines and their generic correction — is.splinets","text":"object Splinets object, object diagnosed; object corrected properly support interval least 2*smorder+4 knots.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostics of splines and their generic correction — is.splinets","text":"list made : logical value , Splinets object robject, numeric value Er. logical value indicates condtions elements Splinets object collection valid splines satisfied, additional diagnostic messages printed . object robject modified input object SLOT fields modified conditions/restrictions proper spline satisfied. numeric value Er giving total squared error deviation input matrix derivative conditions required spline.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Diagnostics of splines and their generic correction — is.splinets","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/is.splinets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostics of splines and their generic correction — is.splinets","text":"","code":"#-----------------------------------------------------# #--------Diagnostics of simple Splinets objects-------# #-----------------------------------------------------# #----------Full support equidistant cases-------------# #-----------------------------------------------------# #Zero order splines, equidistant case, full support n=20; xi=seq(0,1,by=1/(n+1)) sp=new(\"Splinets\",knots=xi)  sp@equid #equidistance flag #> [1] TRUE #Diagnostic of 'Splinets' object 'sp' is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The full support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>  #> $is #> [1] FALSE #>  #> $robject #> splines #> Knots: 22 equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 0  #> Support: The full support range for each spline. #> $Er #> [1] 0 #>   IS=is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The full support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>  IS[[1]] #informs if the object is a spline #> [1] FALSE IS$is   #equivalent to the above #> [1] FALSE  #Third order splines with a noisy matrix of the derivative set.seed(5) k=3; sp@smorder=k; sp@der[[1]]=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))  IS=is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #> The Taylor expansion coefficient matrix does not have the proper number of columns. #> It is evaluated now and assigned to the output. #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.303131 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. IS[[2]]@taylor #corrections #>      [,1]       [,2]        [,3]         [,4] #> [1,]    1 0.04761905 0.001133787 1.799662e-05 sp@taylor #>      [,1] #> [1,]    1 IS[[2]]@der #corrections #> [[1]] #>              [,1]        [,2]          [,3]          [,4] #>  [1,]  0.00000000   0.0000000    0.00000000 -7.024458e+03 #>  [2,] -0.12641647  -7.9642378 -334.49798786  1.469705e+04 #>  [3,] -0.62041814  -7.2293915  365.36153367 -7.687523e+03 #>  [4,] -0.68878219   1.4527638   -0.71101105 -2.796661e-01 #>  [5,] -0.62041412   1.4185891   -0.72432849 -9.844306e+02 #>  [6,] -0.57139992   0.2679628  -47.60197450  1.003237e+03 #>  [7,] -0.59455541  -0.8613413    0.17120093  3.470285e-01 #>  [8,] -0.63537131  -0.8527954    0.18772610  7.557291e+03 #>  [9,] -0.53976211   7.7245010  360.05872310 -1.397604e+04 #> [10,] -0.01522038   9.0243000 -305.46716206  6.403647e+03 #> [11,]  0.18341751   1.7386151   -0.53160753  5.472878e-01 #> [12,]  0.26561582   1.7139209   -0.50554621  5.472878e-01 #> [13,]  0.10491122 -13.5401950 -640.16732427 -1.343290e+04 #> [14,] -0.80330481 -14.8951404  583.25961806  2.569197e+04 #> [15,] -1.07176004  -1.0095326   -0.06409093 -1.224980e+04 #> [16,] -1.11993704  -1.0145600   -0.14705771 -1.742302e+00 #> [17,] -1.16157407  -0.5905113   17.95710289  3.801874e+02 #> [18,] -1.17579757  -0.1426081    0.85483042 -3.591477e+02 #> [19,] -1.18160708  -0.1011358    0.88700587  6.756845e-01 #> [20,] -0.98749213  12.4103942  524.59725595  1.099792e+04 #> [21,] -0.19762544  12.4504025 -522.91690639 -2.199780e+04 #> [22,]  0.00000000   0.0000000    0.00000000  1.098126e+04 #>  sp@der #> [[1]] #>              [,1]        [,2]        [,3]        [,4] #>  [1,] -0.84085548  1.46796190 -0.45656894 -2.10232912 #>  [2,]  1.38435934  0.70676109  0.56222336 -0.30170228 #>  [3,] -1.25549186  0.81900893 -0.88700851 -1.27238344 #>  [4,]  0.07014277 -0.29348185 -0.46024458 -0.27966611 #>  [5,]  1.71144087  1.41858907 -0.72432849 -0.20409732 #>  [6,] -0.60290798  1.49877383 -0.06921116 -0.22561419 #>  [7,] -0.47216639 -0.65708209  1.46324856  0.34702845 #>  [8,] -0.63537131 -0.85279544  0.18772610  0.03236784 #>  [9,] -0.28577363  0.31591504  1.02202286  0.41353129 #> [10,]  0.13810822  1.10969417 -0.59183483 -0.15534848 #> [11,]  1.22763034  2.21546057 -0.11220066  0.97348539 #> [12,] -0.80177945  1.21710364 -0.92495309  0.12109014 #> [13,] -1.08039260  1.47922179  0.75330480  0.18917369 #> [14,] -0.15753436  0.95157383 -0.11260907 -0.56288507 #> [15,] -1.07176004 -1.00953265 -0.06409093  0.49841617 #> [16,] -0.13898614 -2.00047274  0.23327529 -1.74230249 #> [17,] -0.59731309 -1.76218587 -1.13658280  0.97552910 #> [18,] -2.18396676 -0.14260813  0.85483042 -0.02408287 #> [19,]  0.24081726  1.55006037 -0.57837042  0.67568448 #> [20,] -0.25935541 -0.80242318  0.49636154 -0.71030961 #> [21,]  0.90051195 -0.07457892 -0.76005793  2.38723265 #> [22,]  0.94186939  1.89566795 -0.34138627 -0.47343201 #>   is.splinets(IS[[2]]) #The output object is a valid splinet #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 22 equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 3  #> Support: The full support range for each spline. #> $Er #> [1] 2.237243e-23 #>   #-----------------------------------------------------# #--------Full support non-equidistant cases-----------# #-----------------------------------------------------# #Zero order splines, non-equidistant case, full support set.seed(5) n=17; xi=sort(runif(n+2)) xi[1]=0 ;xi[n+1]=1 #The last knot is not in the order.           #It will be reported and corrected in the output.   sp=new(\"Splinets\",knots=xi)  #> NOTE: Knots are not in the strictly increasing order, which is required. #>  #>         The knots have been ordered and ties have been removed.  xi #original knots #>  [1] 0.0000000 0.1104530 0.2002145 0.2018752 0.2625931 0.2732849 0.2843995 #>  [8] 0.3184040 0.3875257 0.4905132 0.5279600 0.5549226 0.5591728 0.6852186 #> [15] 0.7010575 0.8079352 0.8878698 1.0000000 0.9565001 sp@knots #vs. corrected ones #>  [1] 0.0000000 0.1104530 0.2002145 0.2018752 0.2625931 0.2732849 0.2843995 #>  [8] 0.3184040 0.3875257 0.4905132 0.5279600 0.5549226 0.5591728 0.6852186 #> [15] 0.7010575 0.8079352 0.8878698 0.9565001 1.0000000 sp@taylor #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    1 #> [12,]    1 #> [13,]    1 #> [14,]    1 #> [15,]    1 #> [16,]    1 #> [17,]    1 #> [18,]    1  #Diagnostic of 'Splinets' object 'sp' is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The full support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>  #> $is #> [1] FALSE #>  #> $robject #> splines #> Knots: 19 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 0  #> Support: The full support range for each spline. #> $Er #> [1] 0 #>   IS=is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The full support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>    nsp=IS$robject #the output spline -- a corrected version of the input nsp@der #> [[1]] #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    1 #> [12,]    1 #> [13,]    1 #> [14,]    1 #> [15,]    1 #> [16,]    1 #> [17,]    1 #> [18,]    1 #> [19,]    1 #>  sp@der #> [[1]] #>      [,1] #> [1,]    1 #> [2,]    1 #>   #Third order splines nsp@smorder=3 IS=is.splinets(nsp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #> The Taylor expansion coefficient matrix does not have the proper number of columns. #> It is evaluated now and assigned to the output. #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The full support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 0.3450153 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method.  IS[[2]]@taylor #corrections #>       [,1]        [,2]         [,3]         [,4] #>  [1,]    1 0.110453019 6.099935e-03 2.245854e-04 #>  [2,]    1 0.089761434 4.028558e-03 1.205364e-04 #>  [3,]    1 0.001660759 1.379060e-06 7.634284e-10 #>  [4,]    1 0.060717928 1.843333e-03 3.730779e-05 #>  [5,]    1 0.010691811 5.715741e-05 2.037054e-07 #>  [6,]    1 0.011114508 6.176614e-05 2.288334e-07 #>  [7,]    1 0.034004561 5.781551e-04 6.553303e-06 #>  [8,]    1 0.069121728 2.388907e-03 5.504179e-05 #>  [9,]    1 0.102987455 5.303208e-03 1.820546e-04 #> [10,]    1 0.037446782 7.011308e-04 8.751697e-06 #> [11,]    1 0.026962570 3.634901e-04 3.266876e-06 #> [12,]    1 0.004250273 9.032409e-06 1.279673e-08 #> [13,]    1 0.126045769 7.943768e-03 3.337594e-04 #> [14,]    1 0.015838864 1.254348e-04 6.622482e-07 #> [15,]    1 0.106877742 5.711426e-03 2.034748e-04 #> [16,]    1 0.079934571 3.194768e-03 8.512413e-05 #> [17,]    1 0.068630354 2.355063e-03 5.387626e-05 #> [18,]    1 0.043499875 9.461196e-04 1.371869e-05 nsp@taylor #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    1 #> [12,]    1 #> [13,]    1 #> [14,]    1 #> [15,]    1 #> [16,]    1 #> [17,]    1 #> [18,]    1 IS[[2]]@der #corrections #> [[1]] #>            [,1]       [,2]         [,3]        [,4] #>  [1,] 0.0000000  0.0000000    0.0000000   1212.5612 #>  [2,] 0.2723235  7.3965443  133.9310482  -4532.9778 #>  [3,] 0.9294082  1.1570255 -272.9555385 164915.0719 #>  [4,] 0.9310792  0.9311399    0.9285903      1.0000 #>  [5,] 0.9893651  0.9893653    0.9893082      1.0000 #>  [6,] 1.0000000  1.0000000    1.0000000 -21636.2875 #>  [7,] 1.0062252 -0.3252755 -239.4766832  10047.1028 #>  [8,] 0.9225514 -2.6597914  102.1706392  -1465.1489 #>  [9,] 0.9021337  0.9023158    0.8970125      1.0000 #> [10,] 1.0000000  1.0000000    1.0000000      0.0000 #> [11,] 1.0381567  1.0381479    1.0374468      1.0000 #> [12,] 1.0373264 -2.1826600 -239.9470100  -8937.7407 #> [13,] 1.0267724 -2.5741835   55.7124704  69562.4740 #> [14,] 1.0000000  1.0000000    1.0000000   -434.0683 #> [15,] 1.0159650  1.0159643    1.0158389      1.0000 #> [16,] 1.1305543  1.1302463    1.1227166      1.0000 #> [17,] 0.9335090 -9.7006120 -272.1158102  -3418.2773 #> [18,] 0.1070929 -7.3857362  339.5750532   8912.8328 #> [19,] 0.0000000  0.0000000    0.0000000  -7806.3455 #>  nsp@der #> [[1]] #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    1 #> [12,]    1 #> [13,]    1 #> [14,]    1 #> [15,]    1 #> [16,]    1 #> [17,]    1 #> [18,]    1 #> [19,]    1 #>  is.splinets(IS[[2]]) #verification that the correction is a valid object #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 19 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 3  #> Support: The full support range for each spline. #> $Er #> [1] 5.382228e-23 #>   #Randomly assigning the derivative -- a very 'unstable' function. set.seed(5) k=nsp@smorder; S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)); nsp@der[[1]]=S  IS=is.splinets(nsp) #the 2nd element of 'IS' is a spline obtained by correcting 'S' #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #> The Taylor expansion coefficient matrix does not have the proper number of columns. #> It is evaluated now and assigned to the output. #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.286421 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. nsp=is.splinets(IS[[2]]) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  nsp$is #The 'Splinets' object is correct, alternatively use 'nsp$[[1]]'. #> [1] TRUE nsp$robject #A correct spline object, alternatively use 'nsp$[[2]]'. #> splines #> Knots: 19 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 3  #> Support: The full support range for each spline.  #-----------------------------------------------------# #-----Splinets objects with varying support sets------# #-----------------------------------------------------# #-----------------Eequidistant cases------------------# #-----------------------------------------------------# #Zero order splines, equidistant case, support with three components n=20; xi=seq(0,1,by=1/(n+1)) support=list(matrix(c(2,5,6,8,12,18),ncol=2,byrow = TRUE))  sp=new(\"Splinets\",knots=xi,supp=support)  is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The partial support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>  #> $is #> [1] FALSE #>  #> $robject #> splines #> Knots: 22 equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 0  #> Support: Not the full range support, the number of support intervals varies from 3 to 3 #> $Er #> [1] 0 #>   IS=is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The partial support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>   sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support #> [1] 14 dim(IS[[2]]@der[[1]])[1]  #the number of rows in the derivative matrix #> [1] 14 IS[[2]]@der[[1]] #the corrected object #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    1 #> [12,]    1 #> [13,]    1 #> [14,]    1 sp@der #the input derivative matrix #> [[1]] #>      [,1] #> [1,]    1 #> [2,]    1 #>   #Third order splines n=40; xi=seq(0,1,by=1/(n+1)); k=3;  support=list(matrix(c(2,12,15,27,30,40),ncol=2,byrow = TRUE)) m=sum(support[[1]][,2]-support[[1]][,1]+1) #the number of knots in the support SS=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random  sp=new(\"Splinets\",knots=xi,smorder=k,supp=support,der=SS)   IS=is.splinets(sp) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.55822 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 support 2 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 2 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.697993 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 support 3 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 3 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.360743 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method.  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random  IS=is.splinets(sp) #Comparison of the corrected and the original 'der' matrices #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.221246 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 support 2 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 2 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.457675 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 support 3 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 3 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.275708 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method. sp@der #> [[1]] #>              [,1]         [,2]        [,3]         [,4] #>  [1,] -0.14264393 -0.266899439  1.39995727  1.374653325 #>  [2,]  1.41878305  0.164155956  0.01701396  0.291895737 #>  [3,]  0.48713390 -0.393458947  1.84749695  0.710591710 #>  [4,]  0.60344145 -1.843737246 -0.68633938 -0.937760920 #>  [5,]  0.21083288 -1.542288267 -0.21872403 -1.114063127 #>  [6,] -0.03329921 -0.586240360  0.68259291  0.634371955 #>  [7,]  2.02519699 -0.852138909  0.52413002 -0.231192902 #>  [8,] -0.37078675  0.778324555  0.08054998 -1.368194204 #>  [9,] -1.57823445 -0.030317074  0.05378554 -0.754907446 #> [10,] -0.12157195 -1.455657582 -0.73725899 -1.125596649 #> [11,] -1.79667682  0.093784923  0.96643806 -0.219359247 #> [12,] -0.47559154  0.982349222  0.98430685 -0.134307952 #> [13,] -0.88410232 -0.596710162  0.18729094 -0.818020611 #> [14,] -3.49805898  0.074804851  0.27298575  0.472334157 #> [15,] -0.38198337  2.197429431  1.21014609 -0.869256130 #> [16,]  0.97768813  0.795023212  0.18865716 -1.332288341 #> [17,] -0.55804095 -0.538942212  1.96249867  0.070562870 #> [18,] -0.62645515 -1.601283178  0.13871194  0.464093186 #> [19,] -0.53045123 -0.731373566 -1.57862735  0.289158499 #> [20,]  1.89762159 -0.355740791 -0.79702127 -2.884941083 #> [21,]  1.39554068 -0.985414318  1.22435388 -2.334691775 #> [22,] -0.74602587 -0.731170643 -0.36533356 -1.730891047 #> [23,] -0.30557308  1.465324083 -0.16259028  0.825009586 #> [24,]  1.16967817  1.858615318  0.56047918 -1.045039551 #> [25,]  0.30438718  0.003497027 -0.86072563 -0.877193374 #> [26,] -0.11749825 -1.343775245  1.23863449 -0.400389842 #> [27,] -0.06008553  0.151294033  0.76743575 -1.268188972 #> [28,]  1.47093895  0.290009125 -1.08740911  0.138586391 #> [29,] -1.47814761 -0.122478328  0.06750377  1.183571604 #> [30,] -0.68361295  0.125154388  1.60514057 -2.110555073 #> [31,]  0.46054060 -0.772434114  1.23222943  0.260676110 #> [32,] -0.18150193 -1.012966123 -0.37911379  0.945566826 #> [33,] -1.15881631  0.966919601 -1.34986658 -0.619960620 #> [34,]  0.40901892 -0.423327300  0.36491810 -0.009100739 #> [35,] -0.25820706 -0.831599455 -0.36359492  0.520225423 #>  IS[[2]]@der #> [[1]] #>               [,1]         [,2]          [,3]          [,4] #>  [1,]  0.000000000   0.00000000     0.0000000  7.869495e+02 #>  [2,]  0.001903023   0.23407184    19.1938908 -2.632501e+03 #>  [3,]  0.006955176  -0.08080077   -45.0134446  1.875589e+03 #>  [4,] -0.003868862  -0.62081061     0.7326374 -9.377609e-01 #>  [5,] -0.018794935  -0.60322034     0.7097652 -1.114063e+00 #>  [6,] -0.033299206  -0.58624036     0.6825929  0.000000e+00 #>  [7,] -0.047395278  -0.56966052     0.6769541 -2.311929e-01 #>  [8,] -0.061091392  -0.55355640     0.6435835 -1.368194e+00 #>  [9,] -0.059835966   1.25368162   147.5499346  6.023160e+03 #> [10,] -0.012410858   1.52653553  -125.1759138 -1.118176e+04 #> [11,]  0.000000000   0.00000000     0.0000000  5.132212e+03 #> [12,]  0.000000000   0.00000000     0.0000000 -3.235754e+04 #> [13,] -0.078247889  -9.62449036  -789.2082095  6.199852e+04 #> [14,] -0.397808697 -10.43250832   722.9507366 -2.963238e+04 #> [15,] -0.508882038  -1.61347667     0.2098585 -8.692561e-01 #> [16,] -0.548174809  -1.60861673     0.1886572 -2.118317e+00 #> [17,] -0.587358371  -1.60464541     0.1369909  7.056287e-02 #> [18,] -0.626455147  -1.60128318     0.1387119  0.000000e+00 #> [19,] -0.665468876  -1.59781395     0.1457646  2.891585e-01 #> [20,] -0.704490066  -1.60575611    -0.7970213 -3.865422e+01 #> [21,] -0.743897563  -1.62589009    -0.8539650 -2.334692e+00 #> [22,] -0.646450652  15.24816433  1384.5264272  5.680060e+04 #> [23,] -0.130620459  16.06631648 -1317.4379512 -1.107805e+05 #> [24,]  0.000000000   0.00000000     0.0000000  5.401496e+04 #> [25,]  0.000000000   0.00000000     0.0000000 -4.746495e+04 #> [26,] -0.114781056 -14.11806983 -1157.6817258  9.497826e+04 #> [27,] -0.573788324 -14.10368454  1158.8613197 -4.744883e+04 #> [28,] -0.687828663   0.04795220     1.5728928  1.385864e-01 #> [29,] -0.686190918   0.08635666     1.5762730  1.183572e+00 #> [30,] -0.683612946   0.12515439     1.6051406  0.000000e+00 #> [31,] -0.680082333   0.16438169     1.6114985  2.606761e-01 #> [32,] -0.675591410   0.20396779     1.6345611  9.455668e-01 #> [33,] -0.559487219  13.85294618  1117.5816671  4.575383e+04 #> [34,] -0.111715410  13.74099545 -1126.7616269 -9.201808e+04 #> [35,]  0.000000000   0.00000000     0.0000000  4.619723e+04 #>  is.splinets(IS[[2]]) #verification #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 42 equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 3  #> Support: Not the full range support, the number of support intervals varies from 3 to 3 #> $Er #> [1] 5.729312e-22 #>   #-----------------------------------------------------# #----------------Non-equidistant cases----------------# #-----------------------------------------------------# #Zero order splines, non-equidistant case, support with three components set.seed(5) n=43; xi=seq(0,1,by=1/(n+1)); k=3; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1; support=list(matrix(c(2,14,17,30,32,43),ncol=2,byrow = TRUE))  ssp=new(\"Splinets\",knots=xi,supp=support) #with partial support nssp=is.splinets(ssp)$robject #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The partial support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>  nssp@supp #> [[1]] #>      [,1] [,2] #> [1,]    2   14 #> [2,]   17   30 #> [3,]   32   43 #>  nssp@der #> [[1]] #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    1 #> [12,]    1 #> [13,]    1 #> [14,]    1 #> [15,]    1 #> [16,]    1 #> [17,]    1 #> [18,]    1 #> [19,]    1 #> [20,]    1 #> [21,]    1 #> [22,]    1 #> [23,]    1 #> [24,]    1 #> [25,]    1 #> [26,]    1 #> [27,]    1 #> [28,]    1 #> [29,]    1 #> [30,]    1 #> [31,]    1 #> [32,]    1 #> [33,]    1 #> [34,]    1 #> [35,]    1 #> [36,]    1 #> [37,]    1 #> [38,]    1 #> [39,]    1 #>   #Third order splines nssp@smorder=3 #changing the order of the 'Splinets' object set.seed(5) m=sum(nssp@supp[[1]][,2]-nssp@supp[[1]][,1]+1) #the number of knots in the support nssp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1)))  #the derivative matrix at random IS=is.splinets(nssp)  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #> The Taylor expansion coefficient matrix does not have the proper number of columns. #> It is evaluated now and assigned to the output. #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.627611 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 2  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.150335 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 1 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 1 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 3  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.441687 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method. IS$robject@der #> [[1]] #>              [,1]         [,2]          [,3]          [,4] #>  [1,]  0.00000000   0.00000000     0.0000000 -1.929628e+04 #>  [2,] -0.07223144  -7.68032463  -544.4294521  2.973828e+04 #>  [3,] -0.51799311  -1.84007207   802.3475387 -1.381047e+05 #>  [4,] -0.51965960   0.49062561     0.9409529  1.170856e+00 #>  [5,] -0.50475579   0.51892312     0.9755291 -1.155369e+02 #>  [6,] -0.50375248   0.52059087     0.7525181 -1.317889e+00 #>  [7,] -0.47216639   0.56222336     0.6756845  0.000000e+00 #>  [8,] -0.47123174   0.56334697     0.6774436  1.059250e+00 #>  [9,] -0.46584375   0.57785065     2.3872326  1.806421e+02 #> [10,] -0.45728946   0.61213059     2.3814814 -4.000335e-01 #> [11,] -0.42897644   7.72288244  1497.5455686  1.576934e+05 #> [12,] -0.02824895   7.92633217 -1482.6921789 -1.087901e+05 #> [13,]  0.00000000   0.00000000     0.0000000  1.386755e+05 #> [14,]  0.00000000   0.00000000     0.0000000  3.805467e+03 #> [15,]  0.20945973   9.09090662   263.0404888 -2.309831e+05 #> [16,]  0.27442205   1.53955269 -1886.1760195  2.219179e+06 #> [17,]  0.27527652   0.73798142     0.3877417 -1.040391e-01 #> [18,]  0.30490246   0.75330480     0.3836081 -4.316087e+03 #> [19,]  0.31014395   0.64052034   -31.2045231  8.766823e+02 #> [20,]  0.31972965   0.08524925    -0.3599475 -3.928057e-01 #> [21,]  0.32033865   0.08262743    -0.3627974 -3.928057e-01 #> [22,]  0.32068766   0.14844113    39.7230232  1.198677e+04 #> [23,]  0.34434732   0.85483042    -1.9953870 -1.114072e+03 #> [24,]  0.34903214   0.84381186    -1.9997776 -7.959950e-01 #> [25,]  0.25682571 -14.56421432 -1434.8722730 -6.681110e+04 #> [26,]  0.18892004 -15.75261450   875.6610039  5.436200e+05 #> [27,]  0.00000000   0.00000000     0.0000000 -2.433825e+04 #> [28,]  0.00000000   0.00000000     0.0000000  1.490336e+05 #> [29,]  0.09869725  18.69400222  2360.5231706 -1.600882e+05 #> [30,]  0.71909846  34.17654465  -784.1713346  9.003958e+03 #> [31,]  1.71295715   0.02917131     1.2820225 -2.298096e-01 #> [32,]  1.71323710   0.03960047     1.2801516 -8.778185e+01 #> [33,]  1.71372073   0.04830473     0.3326189  2.767448e-01 #> [34,]  1.71449938   0.05342927     0.3368556  2.767448e-01 #> [35,]  1.71807967   0.12052555     2.6001420  4.953529e+01 #> [36,]  1.71836848   0.12660156     2.5989327 -5.173768e-01 #> [37,]  1.23335970 -54.84726795 -4125.3309911 -1.547858e+05 #> [38,]  0.47286188 -54.48517894  4185.3443903  6.887145e+05 #> [39,]  0.00000000   0.00000000     0.0000000 -1.607511e+05 #>  is.splinets(IS$robject)$is #verification of the corrected output object #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> [1] TRUE"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lincomb.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear transformation of splines. — lincomb","title":"Linear transformation of splines. — lincomb","text":"linear combination splines \\(S_j\\) input object computed according $$R_i=\\sum_{j=0}^{d} a_{j} S_j,\\, =1,\\dots, l.$$ returned Splinet-object.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lincomb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear transformation of splines. — lincomb","text":"","code":"lincomb(object, A, reduced = TRUE, SuppExtr = TRUE)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lincomb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear transformation of splines. — lincomb","text":"object Splinets object containing d splines; l x d matrix; coefficients linear transformation, reduced logical; TRUE (default), linear combination calculated accounting actual support sets (recommended sparse splines), FALSE, full support computations used (can faster lower dimension non-sparse cases). SuppExtr logical; TRUE (default), true support extracted, otherwise, full range reported support. Applies case reduced=FALSE.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lincomb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear transformation of splines. — lincomb","text":"Splinet-object contains l splines obtained linear combinations using coefficients rows .  SLOT type output splinet objects sp.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lincomb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Linear transformation of splines. — lincomb","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lincomb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear transformation of splines. — lincomb","text":"","code":"#-------------------------------------------------------------# #------------Simple linear operations on Splinets-------------# #-------------------------------------------------------------# #Gathering three 'Splinets' objects  n=53; k=4; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1;Nspl=10 set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S) #constructing the first proper spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.393512 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 3 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . spl@epsilon=1.0e-5 #to avoid FALSE in the next function due to inaccuracies is.splinets(spl) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 55 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 4  #> Support: The full support range for each spline. #> $Er #> [1] 1.321823e-13 #>   RS=rspline(spl,Nspl) #Random splines plot(RS)  A = matrix(rnorm(5*Nspl, mean = 2, sd = 100), ncol = Nspl)  new_sp1 = lincomb(RS, A) plot(new_sp1)   new_sp2 = lincomb(RS, A, reduced = FALSE) plot(new_sp2)   #---------------------------------------------# #--- Example with different support ranges ---# #---------------------------------------------# n=25; k=3 set.seed(5) xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1 #Defining support ranges for three splines supp=matrix(c(2,12,4,20,6,25),byrow=TRUE,ncol=2) #Initial random matrices of the derivative for each spline SS1=matrix(rnorm((supp[1,2]-supp[1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[2,2]-supp[2,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[3,2]-supp[3,1]+1)*(k+1)),ncol=(k+1))  spl=construct(xi,k,SS1,supp[1,]) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.502577 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[2,]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.705421 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the second and the first ones nspl=construct(xi,k,SS3,supp[3,]) #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.573415 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . spl=gather(spl,nspl) #the third is added  A = matrix(rnorm(3*2, mean = 2, sd = 100), ncol = 3)  new_sp1 = lincomb(spl, A) # based on reduced supports plot(new_sp1)  new_sp2 = lincomb(spl, A, reduced = FALSE) # based on full support plot(new_sp2) # new_sp1 and new_sp2 are same    #-----------------------------------------# #--- Example with varying support sets ---# #-----------------------------------------# n=40; xi=seq(0,1,by=1/(n+1)); k=2;  support=list(matrix(c(2,9,15,24,30,37),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random sp1 = is.splinets(sp)[[2]] #the corrected vs. the original 'der' matrices #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 2.084063 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 2 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 2 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.756979 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 3 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 3 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.558399 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method.  support=list(matrix(c(5,12,17,29),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random sp2 = is.splinets(sp)[[2]] #building a valid spline #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.529603 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 support 2 's highest derivative at the central knot is not equal to zero. #> Spline 1 support 2 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.62228 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method.  spp = gather(sp1,sp2)  support=list(matrix(c(3,10,14,21,27,34),ncol=2,byrow = TRUE)) sp=new(\"Splinets\",knots=xi,smorder=k,supp=support)  m=sum(sp@supp[[1]][,2]-sp@supp[[1]][,1]+1) #the number of knots in the support sp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1))) #the derivative matrix at random sp3 = is.splinets(sp)[[2]] #building a valid spline #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 1 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.843411 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 2 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 2 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.406557 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 3 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1  highest, support 3 's derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the conditions that are required for a spline (up to the accuracy SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.161176 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method.  spp = gather(spp, sp3)  plot(spp)  spp@supp #the supports #> [[1]] #>      [,1] [,2] #> [1,]    2    9 #> [2,]   15   24 #> [3,]   30   37 #>  #> [[2]] #>      [,1] [,2] #> [1,]    5   12 #> [2,]   17   29 #>  #> [[3]] #>      [,1] [,2] #> [1,]    3   10 #> [2,]   14   21 #> [3,]   27   34 #>   set.seed(5) A = matrix(rnorm(3*4, mean = 2, sd = 100), ncol = 3) new_sp1 = lincomb(spp, A) # based on reduced supports plot(new_sp1)  new_sp1@supp #the support of the output from 'lincomb' #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   14   37 #>  #> [[2]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   14   37 #>  #> [[3]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   14   37 #>  #> [[4]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   14   37 #>   new_sp2 = lincomb(spp, A, reduced = FALSE) # based on full support plot(new_sp2) # new_sp1 and new_sp2 are same   new_sp2@supp #the support of the output from 'lincomb' with full support computations #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   14   37 #>  #> [[2]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   14   37 #>  #> [[3]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   14   37 #>  #> [[4]] #>      [,1] [,2] #> [1,]    2   12 #> [2,]   14   37 #>   #-------------------------------------# #--- Support needs some extra care ---# #-------------------------------------# set.seed(5) n=53; k=4; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1 supp1 = matrix(c(1, ceiling(n/2)+1), ncol = 2) supp2 = matrix(c(ceiling(n/2)+1, n+2), ncol = 2) S = matrix(rnorm(5*(ceiling(n/2)+1)), ncol = k+1) a = construct(xi,k,S,supp = supp1) #constructing the first proper spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.557076 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . S = matrix(rnorm(5*(ceiling(n/2)+1)), ncol = k+1) b = construct(xi,k,S,supp = supp2) #constructing the first proper spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.327398 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM .  sp = gather(a,b) plot(sp)   # create a+b and a-b s = lincomb(sp, matrix(c(1,1,1,-1), byrow = TRUE, nrow = 2)) plot(s)  s@supp #> list()  # Sum has smaller support than its terms s1 = lincomb(s, matrix(c(1,1), nrow = 1), reduced = TRUE) plot(s1)  s1@supp # lincomb based on support, the full support is reported #> list() s2 = lincomb(s, matrix(c(1,1), nrow = 1), reduced = FALSE) plot(s2)   s2@supp # lincomb using full der matrix #> [[1]] #>      [,1] [,2] #> [1,]    1   28 #>   s3=lincomb(s, matrix(c(1,1), nrow = 1), reduced = FALSE, SuppExtr=FALSE) s3@supp #the full range is reported as support #> list()  ES=exsupp(s1@der[[1]]) #correcting the matrix and the support  s1@der[[1]]=ES[[1]]    s1@supp[[1]]=ES[[2]] plot(s1) s1@supp[[1]] #>      [,1] [,2] #> [1,]    1   28"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lines-Splinets-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding graphs of splines to a plot — lines,Splinets-method","title":"Adding graphs of splines to a plot — lines,Splinets-method","text":"standard method adding splines existing plot.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lines-Splinets-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding graphs of splines to a plot — lines,Splinets-method","text":"","code":"# S4 method for class 'Splinets' lines(x, sID = NULL, ...)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lines-Splinets-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding graphs of splines to a plot — lines,Splinets-method","text":"x Splinets object; sID vector, specifying indices splines splinet object plotted; ... standard graphical parameters;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lines-Splinets-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adding graphs of splines to a plot — lines,Splinets-method","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/lines-Splinets-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding graphs of splines to a plot — lines,Splinets-method","text":"","code":"#-----------------------------------------------------# #------Adding spline lines to an existing graph-------# #-----------------------------------------------------# n=17; k=4; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1  set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.244621 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . plot(spl,main=\"Mean Spline\",lty=2,lwd=2)   RS=rspline(spl,5) plot(RS,main=\"Random splines around the mean spline\" ) lines(spl,col='red',lwd=4,lty=2)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/plot-Splinets-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting splines — plot,Splinets-method","title":"Plotting splines — plot,Splinets-method","text":"method provides graphical visualization Splinets-class object. method plot Splinets cartesian polar coordinate regular splines periodic splines, respectively.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/plot-Splinets-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting splines — plot,Splinets-method","text":"","code":"# S4 method for class 'Splinets' plot(   object,   x = NULL,   sID = NULL,   vknots = TRUE,   type = \"stnd\",   mrgn = 2,   lwd = 2,   ... )"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/plot-Splinets-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting splines — plot,Splinets-method","text":"object Splinets object; x vector, specifying splines evaluated plots; sID vector, specifying indices splines plotted; vknots logic, indicates auxiliary vertical lines added highlight positions knots; default TRUE. type string, controls layout graphs; following options available \"stnd\" – object@type=\"dspnt\" =\"spnt\", plots   dyadic net supports, types bases single plot information   basis printed , \"simple\" – objects plotted single plot, \"dyadic\" – object@type=\"sp\" true (unstructured collection splines),   plot dyadic net supports. mrgn number, specifying margin size dyadic structure plot; lwd positive integer, line width; ... standard graphical parameters can passed;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/plot-Splinets-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting splines — plot,Splinets-method","text":"plot visualizing Splinet object. entire set splines displayed plot.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/plot-Splinets-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting splines — plot,Splinets-method","text":"standard method plotting splines Splinet-object. plots single graph splines object except field type object represents splinet. latter case, default (dyadic) net plot basis. string argument type can overide produce plot use dyadic net. standard graphical parameters can passed function.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/plot-Splinets-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plotting splines — plot,Splinets-method","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/plot-Splinets-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting splines — plot,Splinets-method","text":"","code":"#-----------------------------------------------------# #-------------------Ploting splinets------------------# #-----------------------------------------------------# #Constructed splines  n=25; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1; k=3 supp=list(t(c(2,12)),t(c(4,20)),t(c(6,25))) #defining support ranges for three splines  #Initial random matrices of the derivative for each spline SS1=matrix(rnorm((supp[[1]][1,2]-supp[[1]][1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[[2]][1,2]-supp[[2]][1,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[[3]][1,2]-supp[[3]][1,1]+1)*(k+1)),ncol=(k+1))   spl=construct(xi,k,SS1,supp[[1]]) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.13763 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[[2]],'CRFC') #>  #> Using  method CRFC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.025867 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method.The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRFC . spl=gather(spl,nspl) #the second and the first ones nspl=construct(xi,k,SS3,supp[[3]],'CRLC') #>  #> Using  method CRLC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.478627 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method.The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative is not symmetrically defined at the center. #>           The values at the two central knots should be equal. #> The highest order derivative values at the two central knots #>           have been made equal by averaging the two central values. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRLC . spl=gather(spl,nspl) #the third is added  plot(spl)    plot(spl,sID=c(1,3))  plot(spl,sID=2)  t = seq(0,0.5,length.out = 1000) plot(spl, t, sID = 1)   #Random splines n=17; k=4; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1  S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.302927 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . plot(spl,main=\"Mean Spline\",lty=2,lwd=2,xlab='')   RS=rspline(spl,5) plot(RS,main=\"Random splines around the mean spline\",ylim=3*range(spl@der[[1]][,1]) ) lines(spl,col='red',lwd=4,lty=2)   #Periodic splines xi = seq(0, 1, length.out = 25) so = splinet(xi, periodic = TRUE)   plot(so$bs)  plot(so$os)  plot(so$bs,type= \"dyadic\")  plot(so$bs, sID=c(4,6))  plot(so$os, type=\"simple\",sID=c(4,6))"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/project.html","id":null,"dir":"Reference","previous_headings":"","what":"Projecting into spline spaces — project","title":"Projecting into spline spaces — project","text":"projection splines functional data linear spline space spanned given set knots.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projecting into spline spaces — project","text":"","code":"project(   fdsp,   knots = NULL,   smorder = 3,   periodic = FALSE,   basis = NULL,   type = \"spnt\",   graph = FALSE )"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projecting into spline spaces — project","text":"fdsp Splinets-object n x (N+1) matrix, representation N functions projected space spanned Splinets-basis specific set knots; parameter Splinets-object containing N splines, orthogonally projected represented basis specified parameters. paramater matrix, treated N piecewise constant functions arguments first column corresponding values functions remaining N columns. knots vector, knots projection space, together smorder fully characterizes projection space; parameter overridden SLOT basis@knots basis input one NULL. smorder integer, order smoothness projection space; parameter overridden  SLOT basis@smorder basis input one NULL. periodic logical, flag indicate B-splines periodic type ; case periodic splines, arguments input knots need within [0,1] , otherwise, error occurs message advising recentering rescaling data shown. basis Splinets-object, basis used representation projection input fdsp; type string, choice basis projection space used basis-parameter given; following choices available 'bs' unorthogonalized B-splines, 'spnt' orthogonal splinet (default), 'gsob' Gramm-Schmidt (one-sided) OB-splines, 'twob' two-sided OB-splines. default 'spnt'. graph logical, indicator illustrative plots produced: splinet used projection(s) dyadic grid, coefficients projection(s) dyadic grid, input function(s), projection(s). ;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projecting into spline spaces — project","text":"value function list made four elements project$input – fdsp, input Splinets-object matrix first column increasing order,   otherwise input numeric matrix ordering according first column, project$coeff – N x (n-k+1) matrix coefficients representation projection input splinet basis, project$basis – spline basis, project$sp – Splinets-object containing projected splines.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projecting into spline spaces — project","text":"obtained coefficients \\(\\mathbf = (a_{ji})\\) respect basis allow evaluate splines \\(S_j\\) projection according $$ S_j=\\sum_{=1}^{n-k-1} a_{ji} OB_{}, \\,\\, j=1,\\dots, N,  $$ \\(n\\) number knots (including endpoints), \\(k\\) spline smoothness order, \\(N\\) number projected functions  \\(OB_i\\)'s consitute considered basis. coefficient splinet basis always evaluated thus, example, PFD=project(FD,knots); ProjDataSplines=lincomb(PFD$coeff,PFD$basis) creates Splinets-object made projections input functional data FD. input parameter basis given, function utilizes basis need build . However, basis B-spline basis, B-spline orthogonalization performed anyway, thus computational gain smaller case basis orthogonal basis.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/project.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Projecting into spline spaces — project","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projecting into spline spaces — project","text":"","code":"#-------------------------------------------------# #----Representing splines in the spline bases-----# #-------------------------------------------------# k=3 # order n = 10 # number of the internal knots (excluding the endpoints) xi = seq(0, 1, length.out = n+2) set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))  spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.383861 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM .  plot(spl) # plotting a spline  spls=rspline(spl,5) # a random sample of splines  Repr=project(spl) #decomposition of splines into the splinet coefficients  Repr=project(spl, graph = TRUE) #decomposition of splines with the following graphs                              #that illustrate the decomposition:                               # 1) The orthogonal spine basis on the dyadic grid;                               # 2) The coefficients of the projections on the dyadic grid;                              # 3) The input splines;                              # 4) The projections of the input.                  Repr$coeff       #the coefficients of the decomposition #>            [,1]        [,2]       [,3]     [,4]        [,5]       [,6] #> [1,] -0.1006816 -0.02484691 -0.1980802 -0.17089 -0.08691961 -0.2024501 #>            [,7]      [,8] #> [1,] -0.3437466 -0.124082 plot(Repr$sp) #plot of the reconstruction of the spline  plot(spls) Reprs=project(spls,basis = Repr$basis) #decomposing splines using the available basis plot(Reprs$sp)   Reprs2=project(spls,type = 'gsob') #using the Gram-Schmidt basis   #The case of the regular non-normalized B-splines: Reprs3=project(spls,type = 'bs')  plot(Reprs3$basis) gramian(Reprs3$basis,norm_only = TRUE) #the B-splines follow the classical definition and  #> [1] 0.04357864 0.04357864 0.04357864 0.04357864 0.04357864 0.04357864 0.04357864 #> [8] 0.04357864                                        #thus are not normalized plot(spls)  plot(Reprs3$basis) #Bsplines plot(Reprs3$sp) #reconstruction using the B-splines and the decomposition  #a non-equidistant example n=10; k=3 set.seed(5) xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1  S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> The spline 1 'ths highest derivative at the two central knots has been made equal by averaging SLOT 'der'. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.177526 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . plot(spl) spls=rspline(spl,5) # a random sample of splines plot(spls) Reprs=project(spls,type = 'twob') #decomposing using the two-sided orthogonalization plot(Reprs$basis) plot(Reprs$sp)   #The case of the regular non-normalized B-splines: Reprs2=project(spls,basis=Reprs$basis)  plot(Reprs2$sp) #reconstruction using the B-splines and the decomposition  #-------------------------------------------------# #-----Projecting splines into a spline space------# #-------------------------------------------------# k=3 # order n = 10 # number of the internal knots (excluding the endpoints) xi = seq(0, 1, length.out = n+2) set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))  spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.383861 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM .  plot(spl) #the spline  knots=runif(8) Prspl=project(spl,knots) #> The knots were not given in the strictly increasing order, which is required. The ordered knots with removed ties are replacing the input knot values.  plot(Prspl$sp) #the projection spline Rspl=refine(spl,newknots = knots) #embedding the spline to the common space plot(Rspl) RPspl=refine(Prspl$sp,newknots = xi)  #embedding the projection spline to the common space plot(RPspl) All=gather(RPspl,Rspl) #creating the Splinets-object with the spline and its projection Rbasis=refine(Prspl$basis,newknots = xi) #embedding the basis to the common space plot(Rbasis)  Res=lincomb(All,matrix(c(1,-1),ncol=2)) plot(Res) gramian(Res,Sp2 = Rbasis) #the zero valued innerproducts -- the orthogonality of the residual spline #>               [,1]          [,2]          [,3]         [,4] #> [1,] -1.183883e-16 -4.617433e-16 -8.097876e-16 4.333287e-16  spls=rspline(spl,5) # a random sample of splines Prspls=project(spls,knots,type='bs') #projection in the B-spline representation #> The knots were not given in the strictly increasing order, which is required. The ordered knots with removed ties are replacing the input knot values. plot(spls) lines(Prspls$sp) #presenting projections on the common plot with the original splines  Prspls$sp@knots #> [1] 0.2344320 0.4557002 0.4724108 0.5744543 0.6254065 0.7207331 0.9202377 #> [8] 0.9283003 Prspls$sp@supp #> list()  plot(Prspls$basis)   #Bspline basis   #An example with partial support  Bases=splinet(xi,k)  BS_Two=subsample(Bases$bs,c(2,length(Bases$bs@der))) plot(BS_Two) A=matrix(c(1,-2),ncol=2) spl=lincomb(BS_Two,A) plot(spl)  knots=runif(13) Prspl=project(spl,knots) #> The knots were not given in the strictly increasing order, which is required. The ordered knots with removed ties are replacing the input knot values. plot(Prspl$sp) Prspl$sp@knots #>  [1] 0.2304824 0.2505103 0.5214470 0.5321001 0.5742837 0.5957515 0.6999059 #>  [8] 0.7039371 0.7107075 0.7107501 0.8330875 0.8375177 0.9653198 Prspl$sp@supp #> list()  #Using explicit bases   k=3 # order n = 10 # number of the internal knots (excluding the endpoints) xi = seq(0, 1, length.out = n+2) set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))  spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.383861 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM . spls=rspline(spl,5) # a random sample of splines  plot(spls)  knots=runif(20) base=splinet(knots,smorder=k) #> Knots were not given in the strictly increasing order, which is required. #>  #>           Ordered  knots with removed ties are replacing the input values. plot(base$os)  Prsps=project(spls,basis=base$os) plot(Prsps$sp) #projection splines vs. the original splines lines(spls)  #------------------------------------------------------# #---Projecting discretized data into a spline space----# #------------------------------------------------------# k=3; n = 10; xi = seq(0, 1, length.out = n+2) set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S); spls=rspline(spl,10) # a random sample of splines #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.383861 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM .  x=runif(50) FData=evspline(spls,x=x) #discrete functional data  matplot(FData[,1],FData[,-1],pch='.',cex=3)                    #adding small noise to the data noise=matrix(rnorm(length(x)*10,0,sqrt(var(FData[,2]/10))),ncol=10)  FData[,-1]=FData[,-1]+noise  matplot(FData[,1],FData[,-1],pch='.',cex=3)  knots=runif(12)   DatProj=project(FData,knots) #> The knots were not given in the strictly increasing order, which is required. The ordered knots with removed ties are replacing the input knot values. #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list. #> The range of the input data is larger than the range of knots in the projection space. #>  #> The  7  values at the arguments outside the projection range will not affect the projection.  lines(DatProj$sp) #the projections at the top of the original noised data  plot(DatProj$basis) #the splinet in the problem  #Adding knots to the projection space so that all data points are included #in the range of the knots for the splinet basis  knots=c(-0.1,0.0,0.1,0.85, 0.9, 1.1,knots)  bases=splinet(knots) #> Knots were not given in the strictly increasing order, which is required. #>  #>           Ordered  knots with removed ties are replacing the input values.  DatProj1=project(FData,basis = bases$os) #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list.   matplot(FData[,1],FData[,-1],pch='.',cex=3) lines(DatProj1$sp)   #Using the B-spline basis  knots=xi  bases=splinet(knots,type='bs')  DatProj3=project(FData,basis = bases$bs) #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list.  matplot(FData[,1],FData[,-1],pch='.',cex=3) lines(DatProj3$sp)   DatProj4=project(FData,knots,k,type='bs') #this includes building the base of order 4 #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list.  matplot(FData[,1],FData[,-1],pch='.',cex=3) lines(DatProj4$sp)  lines(spls) #overlying the functions that the original data were built from  #Using two-sided orthonormal basis  DatProj5=project(FData,knots,type='twob') #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list. matplot(FData[,1],FData[,-1],pch='.',cex=3) lines(DatProj5$sp) lines(spls)  #--------------------------------------------------# #-----Projecting into a periodic spline space------# #--------------------------------------------------# #generating periodic splines n=1# number of samples k=3 N=3  n_knots=2^N*k-1 #the number of internal knots for the dyadic case xi = seq(0, 1, length.out = n_knots+2)  so = splinet(xi,smorder = k, periodic = TRUE) #The splinet basis stwo = splinet(xi,smorder = k,type='twob', periodic = TRUE) #The two-sided orthogonal basis  plot(so$bs,type='dyadic',main='B-Splines on dyadic structure') #B-splines on the dyadic graph   plot(stwo$os,main='Symmetric OB-Splines') #The two-sided orthogonal basis   plot(stwo$os,type='dyadic',main='Symmetric OB-Splines on dyadic structure')  # generating a periodic spline as a linear combination of the periodic splines  A1= as.matrix(c(1,0,0,0.7,0,0,0,0.8,0,0,0,0.4,0,0,0, 1, 0,0,0,0,0,1,0, .5),nrow= 1) circular_spline=lincomb(so$os,t(A1))  plot(circular_spline)  #Graphical visualizations of the projections   Pro_spline=project(circular_spline,basis = so$os,graph = TRUE) plot(Pro_spline$sp)  #---------------------------------------------------------------# #---Projecting discretized data into a periodic spline space----# #---------------------------------------------------------------# nx=100 # number of discritization  n=1# number of samples k=3 N=3  n_knots=2^N*k-1 #the number of internal knots for the dyadic case xi = seq(0, 1, length.out = n_knots+2)  so = splinet(xi,smorder = k, periodic = TRUE)  hf=1/nx  grid=seq (hf , 1, by=hf) #grid  l=length(grid) BB = evspline(so$os, x =grid) fbases=matrix(c(BB[,2],BB[,5],BB[,9],BB[,13],BB[,17], BB[,23], BB[,25]), nrow = nx)  #constructing periodic data  f_circular=matrix(0,ncol=n+1,nrow=nx) lambda=c(1,0.7,0.8,0.4, 1,1,.5) f_circular[,1]= BB[,1] f_circular[,2]= fbases%*%lambda  plot(f_circular[,1], f_circular[,2], type='l')  Pro=project(f_circular,basis = so$os)  plot(Pro$sp)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/refine.html","id":null,"dir":"Reference","previous_headings":"","what":"Refining splines through adding knots — refine","title":"Refining splines through adding knots — refine","text":"spline given order remains spline order one considers bigger set knots original one.              However, embedding changes Splinets representation -refined spline.              function evaluates corresponding Splinets-object.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/refine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refining splines through adding knots — refine","text":"","code":"refine(object, mult = 2, newknots = NULL)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/refine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refining splines through adding knots — refine","text":"object Splinets-object, object represented Splinets-object refined set knots; mult positive integer, refining rate; number knots put equally spaced existing knots. newknots m vector, new knots; knots need ordered knots input Splinets-object knots allowed since ties resolved.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/refine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refining splines through adding knots — refine","text":"Splinet object new refined knots new matrix derivatives evaluated new knots combined original ones.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/refine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Refining splines through adding knots — refine","text":"function merges new knots ones input object. utilizes deriva()-function evaluate derivative refined knots. removes duplications refined knots, account also -fully supported case. case range additional knots extends beyond knots input Splinets-object, support sets output Splinets-object account smaller full support.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/refine.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Refining splines through adding knots — refine","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/refine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refining splines through adding knots — refine","text":"","code":"#-------------------------------------------------# #----Refining splines - the full support case-----# #-------------------------------------------------# k=3 # order n = 16 # number of the internal knots (excluding the endpoints) xi = seq(0, 1, length.out = n+2) set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))  spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.29923 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM .  plot(spl) # plotting a spline    rspl=refine(spl) # refining the equidistant by doubling its knots plot(rspl)  rspl@equid  # the outcome is equidistant #> [1] TRUE  #a non-equidistant case n=17; k=4 xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1  S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.639126 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM . plot(spl)  mult=3 #adding two knots between each subsequent pair of the original knots rspl=refine(spl,mult)  is.splinets(rspl) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 55 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 4  #> Support: The full support range for each spline. #> $Er #> [1] 8.399186e-19 #>  plot(rspl)   #adding specific knots rspl=refine(spl,newknots=c(0.5,0.75)) rspl@knots #>  [1] 0.00000000 0.08046064 0.28675657 0.31881230 0.33696592 0.43827330 #>  [7] 0.50000000 0.51291065 0.54819018 0.57502166 0.61170086 0.63571503 #> [13] 0.64470537 0.66039129 0.69090463 0.69626323 0.69773493 0.72383933 #> [19] 0.75000000 0.81337853 1.00000000 is.splinets(rspl) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 21 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 4  #> Support: The full support range for each spline. #> $Er #> [1] 8.399072e-19 #>  plot(rspl)   #----------------------------------------------------# #----Refining splines - the partial support case-----# #----------------------------------------------------#  Bases=splinet(xi,k) plot(Bases$bs)  Base=Bases$bs  BS_Two=subsample(Bases$bs,c(1,length(Base@der))) plot(BS_Two)  A=matrix(c(1,-1),ncol=2) spl=lincomb(BS_Two,A)  rspl=refine(spl) #doubling the number of knots plot(rspl)  is.splinets(rspl) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> $is #> [1] TRUE #>  #> $robject #> splines #> Knots: 37 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 4  #> Support: Not the full range support, the number of support intervals varies from 2 to 2 #> $Er #> [1] 1.50215e-19 #>  rspl@supp #the support is evaluated  #> [[1]] #>      [,1] [,2] #> [1,]    1   11 #> [2,]   27   37 #>  spl@supp #> [[1]] #>      [,1] [,2] #> [1,]    1    6 #> [2,]   14   19 #>   #The case of adding knots explicitely BS_Middle=subsample(Bases$bs,c(floor(length(Base@der)/2))) spls=gather(spl,BS_Middle) plot(spls)   rspls=refine(spls, newknots=c(0.2,0.5,0.85)) #two splines with partial support sets                                               #by adding three knots to B-splines plot(rspls)   #----------------------------------------------------# #------Refining splines over the larger range--------# #----------------------------------------------------#  k=4 # order n = 25 # number of the internal knots (excluding the endpoints) xi = seq(0, 1, length.out = n+2) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))  spl=construct(xi,k,S)  #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.366301 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM .  plot(spl) # plotting a spline  newknots=c(-0.1,0.4,0.6,1.2)  #the added knots create larger range  rspl=refine(spl,newknots=newknots) spl@supp #the original spline has the full support #> list() rspl@supp #the embedded spline has partial support #> [[1]] #>      [,1] [,2] #> [1,]    2   30 #>  spl@equid #> [1] TRUE rspl@equid #> [1] FALSE plot(rspl)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/rspline.html","id":null,"dir":"Reference","previous_headings":"","what":"Random splines — rspline","title":"Random splines — rspline","text":"function simulates random Splinets-object made random splines center input spline matrix derivatives added error term form $$ \\boldsymbol \\Sigma^{1/2}\\mathbf Z \\boldsymbol \\Theta^{1/2},  $$  \\(\\mathbf Z\\) \\((n+2)\\times (k+1)\\) matrix iid standard normal variables entries, \\(\\boldsymbol \\Sigma\\) \\(\\boldsymbol \\Theta\\) matrix parameters. matrix error term corrected one methods thus resulting matrix derivatives knots corresponding valid spline.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/rspline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random splines — rspline","text":"","code":"rspline(S, N = 1, Sigma = NULL, Theta = NULL, mthd = \"RRM\")"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/rspline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random splines — rspline","text":"S Splinets-object n+2 knots order smoothness k, representing center randomly simulated splines; number splines object bigger one, first spline object used. N positive integer, size sample; Sigma matrix; (n+2)x(n+2) matrix, controls correlations derivatives order different knots. positive number, represents diagonal (n+2)x(n+2) matrix number diagonal. n+2 vector, represents diagonal (n+2)x(n+2) matrix vector entries diagonal. NULL (default) represents identity matrix. Theta matrix;  (k+1)x(k+1), controls correlations different derivatives knot. positive number, represents diagonal matrix number diagonal. k+1 vector, represents diagonal matrix vector entries diagonal.  NULL (default), represents k+1 identity matrix; mthd string, one three methods: RCC, CR-LC, CR-FC, adjust random error matrix corresponds valid spline;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/rspline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random splines — rspline","text":"Splinets-object contains N generated splines constituting iid sample splines;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/rspline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random splines — rspline","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/rspline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random splines — rspline","text":"","code":"#-----------------------------------------------------# #-------Simulation of a standard random splinet-------# #-----------------------------------------------------# n=17; k=4; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1  S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S) #Construction of the mean spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #>  The spline 1 'ths highest derivative at the central knot is zero. #> Now it is set to zero. #>  #> The derivative matrix for spline 1 does not satisfy the smoothness conditions (up to the accuracy SLOT 'epsilon'). #> The standard error per matrix entry is 1.480098 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 6 knots, the first 1 entries of the 6 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object has the derivative matrix corrected by the RRM method. #>  #> The matrix derivative is now corrected by method RRM .  RS=rspline(spl) graphsp=evspline(RS) #Evaluating the random spline meansp=evspline(spl) RS=rspline(spl,5) #Five more samples graphsp5=evspline(RS)  m=min(graphsp[,2],meansp[,2],graphsp5[,2:6]) M=max(graphsp[,2],meansp[,2],graphsp5[,2:6])  plot(graphsp,type='l',ylim=c(m,M)) lines(meansp,col='red',lwd=3,lty=2) #the mean spline for(i in 1:5){lines(graphsp5[,1],graphsp5[,i+1],col=i)}   #-----------------------------------------------------# #------------Different construction method------------# #-----------------------------------------------------# RS=rspline(spl,8,mthd='CRLC'); graphsp8=evspline(RS)  m=min(graphsp[,2],meansp[,2],graphsp8[,2:6]) M=max(graphsp[,2],meansp[,2],graphsp8[,2:6])  plot(meansp,col='red',type='l',lwd=3,lty=2,ylim=c(m,M)) #the mean spline for(i in 1:8){lines(graphsp8[,1],graphsp8[,i+1],col=i)}   #-----------------------------------------------------# #-------Simulation of with different variances--------# #-----------------------------------------------------# Sigma=seq(0.1,1,n+2);Theta=seq(0.1,1,k+1) RS=rspline(spl,N=10,Sigma=Sigma) #Ten samples RS2=rspline(spl,N=10,Sigma=Sigma,Theta=Theta) #Ten samples graphsp10=evspline(RS); graphsp102=evspline(RS2)  m=min(graphsp[,2],meansp[,2],graphsp10[,2:10]) M=max(graphsp[,2],meansp[,2],graphsp10[,2:10])  plot(meansp,type='l',ylim=c(m,M),col='red',lwd=3,lty=2)  for(i in 1:10){lines(graphsp10[,1],graphsp10[,i+1],col=i)}   m=min(graphsp[,2],meansp[,2],graphsp102[,2:10]) M=max(graphsp[,2],meansp[,2],graphsp102[,2:10])  plot(meansp,type='l',ylim=c(m,M),col='red',lwd=3,lty=2)  for(i in 1:10){lines(graphsp102[,1],graphsp102[,i+1],col=i)}   #-----------------------------------------------------# #-------Simulation for the mean spline to be----------# #------=----defined on incomplete supports------------# #-----------------------------------------------------# n=43; xi=seq(0,1,by=1/(n+1)); k=3; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1; support=list(matrix(c(2,14,25,43),ncol=2,byrow = TRUE)) ssp=new(\"Splinets\",knots=xi,supp=support) #with partial support nssp=is.splinets(ssp)$robject #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The partial support range case. #> SLOT 'der' do not have properly set the dimension for spline 1 in the input 'Splinets' object. #> In the output object, it is set temporarily to the matrix of 'ones' with the proper dimension. #>  nssp@smorder=3 #changing the order of the 'Splinets' object m=sum(nssp@supp[[1]][,2]-nssp@supp[[1]][,1]+1) #the number of knots in the support nssp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1)))  #the derivative matrix at random spl=is.splinets(nssp)$robject #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #> The Taylor expansion coefficient matrix does not have the proper number of columns. #> It is evaluated now and assigned to the output. #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.480395 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 support 2 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.233827 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. RS=rspline(spl,Sigma=0.05,Theta=c(1,0.5,0.3,0.05)) graphsp=evspline(RS); meansp=evspline(spl)  m=min(graphsp[,2],meansp[,2],graphsp5[,2:6]) M=max(graphsp[,2],meansp[,2],graphsp5[,2:6])  plot(graphsp,type='l',ylim=c(m,M)) lines(meansp,col='red',lwd=3,lty=2) #the mean spline"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/seq2dyad.html","id":null,"dir":"Reference","previous_headings":"","what":"Organizing indices in a spline basis in the net form — seq2dyad","title":"Organizing indices in a spline basis in the net form — seq2dyad","text":"auxiliary function generates map sequential order dyadic net structure spline basis. works indices can utilized basis space splines zero-boundary conditions. function useful creating dyadic structure graphs whenever reference k-tuples levels support needed.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/seq2dyad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organizing indices in a spline basis in the net form — seq2dyad","text":"","code":"seq2dyad(n_sp, k)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/seq2dyad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organizing indices in a spline basis in the net form — seq2dyad","text":"n_sp positive integer, number splines organized dyadic net; dyadic net need fully dyadic, .e. n_sp need equal \\(k2^n-1\\), \\(n\\) number internal knots. See references details. k size tuple dyadic net; naturally corresponds smoothness order splines net build.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/seq2dyad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organizing indices in a spline basis in the net form — seq2dyad","text":"double indexed list single row matrices positive integers range 1:n_sp. vector typically length k may correspond incomplete tuplets thus can shorter. first index list points level dyadic structure, second one number tuplet given level. integers vector pointed list correspond sequential index element belonging tuplet.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/seq2dyad.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Organizing indices in a spline basis in the net form — seq2dyad","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/seq2dyad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organizing indices in a spline basis in the net form — seq2dyad","text":"","code":"#-------------------------------------------------------# #--The support layers of the dyadic structure of bases--# #-------------------------------------------------------# k=4 # order n = 36 # number of the internal knots (excluding the endpoints) xi = seq(0, 1, length.out = n+2) spnt=splinet(xi,k)  plot(spnt$os)                #standard plotting   plot(spnt$bs,type='dyadic')  #dyadic format of plots   net=seq2dyad(n-k+1,k)  #retrieving dyadic structure ind1=c(net[[4]][[1]],net[[4]][[2]])  plot(subsample(spnt$os,ind1))  ind2=c(net[[4]][[3]],net[[4]][[4]]) #the lowest support in the dyadic net  lines(subsample(spnt$bs,ind2))"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/splinet.html","id":null,"dir":"Reference","previous_headings":"","what":"B-splines, periodic B-splines and their orthogonalization — splinet","title":"B-splines, periodic B-splines and their orthogonalization — splinet","text":"B-splines (periodic B-splines)  either given input generated inside routine. , given B-splines argument type, routine additionally generates Splinets-object representing orthonormal spline basis obtained certain orthonormalization B-splines. Orthonormal spline bases obtained one following methods: Gram-Schmidt method, two-sided method, /splinet algorithm, default method. spline bases kept format Splinets-objects.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/splinet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"B-splines, periodic B-splines and their orthogonalization — splinet","text":"","code":"splinet(   knots = NULL,   smorder = 3,   type = \"spnt\",   Bsplines = NULL,   periodic = FALSE,   norm = F )"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/splinet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"B-splines, periodic B-splines and their orthogonalization — splinet","text":"knots n+2 vector, knots (presented increasing order); needed, Bsplines argumment NULL, case knots Bsplines inherited. smorder integer,  order splines, default smorder=3; inherited Bsplines argumment latter NULL. type string, type basis; following choices available 'bs' unorthogonalized B-splines, 'spnt' orthogonal splinet (default), 'gsob' Gramm-Schmidt (one-sided) O-splines, 'twob' two-sided O-splines. Bsplines Splinet-object, basis B-splines (NULL); argument NULL first two arguments needed since inherited Bsplines. periodic logical, flag indicate B-splines periodic type ; norm logical, flag indicate output B-splines normalized;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/splinet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"B-splines, periodic B-splines and their orthogonalization — splinet","text":"Either list list(\"bs\"=Bsplines) made single Splinet-object Bsplines type=='bs', represents B-splines (B-splines normalized , depending norm-flag), list two Splinets-objects: list(\"bs\"=Bsplines,\"os\"=Splinet), Bsplines either computed (input Bspline= NULL) taken input Bspline (output normalized depending norm-flag), Splinet B-spline orthognalization determined input argument type.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/splinet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"B-splines, periodic B-splines and their orthogonalization — splinet","text":"B-spline basis, given input, computed  following recurrent (respect smoothness order B-splines) formula $$ B_{l,k}^{\\boldsymbol \\xi }(x)= \\frac{x- {\\xi_{l}}  }{ {\\xi_{l+k}}-{\\xi_{l}} } B_{l,k-1}^{\\boldsymbol \\xi}(x) +  \\frac{{\\xi_{l+1+k}}-x }{ {\\xi_{l+1+k}}-{\\xi_{l+1}}}  B_{l+1,k-1}^{\\boldsymbol \\xi}(x), l=0,\\dots, n-k. $$  dyadic algorithm implemented takes account efficiencies due equally space knots (exhibited Toeplitz form Gram matrix) problem fully dyadic, .e. number internal knots smorder*2^N-1, integer N. utilize efficiency may advantageous, large number equally spaced knots, choose number follows fully dyadic form. additional advantage dyadic form complete symmetry levels support. algorithm works zero boundary splines periodic splines.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/splinet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"B-splines, periodic B-splines and their orthogonalization — splinet","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/splinet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"B-splines, periodic B-splines and their orthogonalization — splinet","text":"","code":"#--------------------------------------# #----Splinet, equally spaced knots-----# #--------------------------------------# k=2 # order n_knots = 5 # number of knots xi = seq(0, 1, length.out = n_knots)  so = splinet(xi, k)  plot(so$bs) #Plotting B-splines  plot(so$os) #Plotting Splinet   #Verifying the orthogonalization gm = gramian(so$os) #evaluation of the inner products diag(gm) #> [1] 1 1 sum(gm - diag(diag(gm))) #> [1] -1.319476e-15  #An example of the dyadic structure with equally spaced knots k=3 N=3 n_knots=2^N*k-1 #the number of internal knots for the dyadic case  xi = seq(0, 1, length.out = n_knots+2)  so = splinet(xi)   plot(so$bs,type=\"simple\",vknots=FALSE,lwd=3) #Plotting B-splines in a single simple plot  plot(so$os,type=\"simple\",vknots=FALSE,lwd=3)    plot(so$os,lwd=3,mrgn=2) #Plotting the splinet on the dyadic net of support intervals   so=splinet(xi, Bsplines=so$bs, type='gsob') #Obtaining the Gram-Schmidt orthogonalization plot(so$os,type=\"simple\",vknots=FALSE)      #Without computing B-splines again   so=splinet(xi, Bsplines=so$bs, type='twob') #Obtaining the symmetrize orthogonalization plot(so$os,type=\"simple\",vknots=FALSE)        #-------------------------------------# #---Splinet, unequally spaced knots---# #-------------------------------------# n_knots=25  xi = c(0, sort(runif(n_knots)), 1)  sone = splinet(xi, k)  plot(sone$bs, type='dyadic') #Plotting B-splines  plot(sone$os) #Plotting Splinet   #Verifying the orthogonalization gm = gramian(sone$os) #evaluation of the inner products diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] -2.164443e-13  #------------------------------------------# #---Dyadic splinet, equally spaced knots---# #------------------------------------------# k = 2 # order N = 3 # support level n_so = k*(2^N-1) # number of splines in a dyadic structure with N and k n_knots = n_so + k + 1 # number of knots xi = seq(0, 1, length.out = n_knots)  sodyeq = splinet(xi, k)  plot(sodyeq$bs) #Plotting B-splines  plot(sodyeq$os) #Plotting Splinet   #Verifying the orthogonalization gm = gramian(sodyeq$os) #evaluation of the inner products diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] -1.52321e-14  #--------------------------------------------# #---Dyadic splinet, unequally spaced knots---# #--------------------------------------------# xi = c(0, sort(runif(n_knots)), 1)  sody = splinet(xi, k)   plot(sody$bs) #Plotting B-splines  plot(sody$os) #Plotting Splinet   #Verifying the orthogonalization gm = gramian(sody$os) #evaluation of the inner products diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] -1.275806e-14  #-----------------------------------------# #---Bspline basis, equally spaced knots---# #-----------------------------------------# n = 15 xi = seq(0,1,length.out = n+2) order = 2  bs = splinet(xi, order, type = 'bs')  plot(bs$bs)   #---------------------------------------------# #---Bspline basis, non-equally spaced knots---# #---------------------------------------------# n = 6 xi = c(0,sort(runif(n)),1) order = 3  so = splinet(xi, order, type = 'bs') #unnormalized version plot(so$bs)    so1 = splinet(type='bs',Bsplines=so$bs,norm=TRUE) #normalized version plot(so1$bs)   #-------------------------------------------------# #---Gram-Schmidt osplines, equally spaced knots---# #-------------------------------------------------# so = splinet(xi, order,  type = 'gsob')  plot(so$bs)  plot(so$os)   #Using the previously generated B-splines and normalizing them so1 = splinet(Bsplines=so$bs, type = \"gsob\",norm=TRUE)   plot(so1$bs) #normalized B-splines  plot(so1$os) #the one sided osplines   gm = gramian(so1$os) #evaluation of the inner products diag(gm) #> [1] 1 1 1 1 sum(gm - diag(diag(gm))) #verification of the orghonoalization of the matrix #> [1] -2.520335e-15  #-----------------------------------------------------# #---Gram-Schmidt osplines, non-equally spaced knots---# #-----------------------------------------------------#  so = splinet(Bsplines=sody$bs, type = 'gsob') #previously genereted Bsplines  plot(so$bs)  plot(so$os)   gm = gramian(so$os) diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] -1.611008e-14  #---------------------------------------------# #---Twosided osplines, equally spaced knots---# #---------------------------------------------#  so = splinet(Bsplines=bs$bs, type = 'twob') plot(so$os)   gm = gramian(so$os) #verification of the orthogonality diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] -1.471562e-14  #-------------------------------------------------# #---Twosided osplines, non equally spaced knots---# #-------------------------------------------------#  so = splinet(Bsplines=sody$bs, type = 'twob') plot(so$os)   gm = gramian(so$os) #verification of the orthogonality diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] 1.40572e-14  #--------------------------------------------# #---Periodic splinet, equally spaced knots---# #--------------------------------------------# k=2 # order n_knots = 12 # number of knots xi = seq(0, 1, length.out = n_knots)  so = splinet(xi, k, periodic = TRUE)  plot(so$bs) #Plotting B-splines  plot(so$os) #Plotting Splinet   #Verifying the orthogonalization gm = gramian(so$os) #evaluation of the inner products diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] -6.644666e-18  #An example of the dyadic structure with equally spaced knots k=3 N=3 n_knots=2^N*k-1 #the number of internal knots for the dyadic case  xi = seq(0, 1, length.out = n_knots+2)  so = splinet(xi, periodic = TRUE)   plot(so$bs,type=\"simple\") #Plotting B-splines in a single simple plot  plot(so$os,type=\"simple\")    plot(so$os) #Plotting the splinet on the dyadic net of support intervals   so=splinet(xi, Bsplines=so$bs, type='gsob') #Obtaining the Gram-Schmidt orthogonalization plot(so$os,type=\"simple\")      #Without computing B-splines again   so=splinet(xi, Bsplines=so$bs , type='twob') #Obtaining the symmetrize orthogonalization plot(so$os,type=\"simple\")      #-------------------------------------# #---Splinet, unequally spaced knots---# #-------------------------------------# n_knots=25  xi = c(0, sort(runif(n_knots)), 1)  sone = splinet(xi, k, periodic = TRUE)  plot(sone$bs, type='dyadic') #Plotting B-splines  plot(sone$os) #Plotting Splinet   #Verifying the orthogonalization gm = gramian(sone$os) #evaluation of the inner products diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] 3.920568e-13  #------------------------------------------# #---Dyadic splinet, equally spaced knots---# #------------------------------------------# k = 2 # order N = 3 # support level n_so = k*(2^N-1) # number of splines in a dyadic structure with N and k n_knots = n_so + k + 1 # number of knots xi = seq(0, 1, length.out = n_knots)  sodyeq = splinet(xi, k, periodic = TRUE)  plot(sodyeq$bs) #Plotting B-splines  plot(sodyeq$os) #Plotting Splinet   #Verifying the orthogonalization gm = gramian(sodyeq$os) #evaluation of the inner products diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] -1.479494e-14  #--------------------------------------------# #---Dyadic splinet, unequally spaced knots---# #--------------------------------------------# xi = c(0, sort(runif(n_knots)), 1)  sody = splinet(xi, k, periodic = TRUE)   plot(sody$bs) #Plotting B-splines  plot(sody$os) #Plotting Splinet   #Verifying the orthogonalization gm = gramian(sody$os) #evaluation of the inner products diag(gm) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 sum(gm - diag(diag(gm))) #> [1] -1.505296e-14"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/subsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsampling from a set of splines — subsample","title":"Subsampling from a set of splines — subsample","text":"function constructs Splinets-object made subsampled elements input Splinets-object. input objects order knots.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/subsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsampling from a set of splines — subsample","text":"","code":"subsample(Sp, ss)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/subsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsampling from a set of splines — subsample","text":"Sp Splinets-object, collection s splines; ss vector integers, coordinates 1:s;","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/subsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsampling from a set of splines — subsample","text":"Splinets-object containing length(ss) splines selected input object./","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/subsample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subsampling from a set of splines — subsample","text":"output Splinet-object made subsampled splines always regular type, .e. SLOT type='sp'.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/subsample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Subsampling from a set of splines — subsample","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/subsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsampling from a set of splines — subsample","text":"","code":"#-----------------------------------------------------# #---------------------Subsampling---------------------# #-----------------------------------------------------#  #Example with different support ranges, the 3rd order n=25; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1; k=3 supp=list(t(c(2,12)),t(c(4,20)),t(c(6,25))) #defining support ranges for three splines  #Initial random matrices of the derivative for each spline set.seed(5) SS1=matrix(rnorm((supp[[1]][1,2]-supp[[1]][1,1]+1)*(k+1)),ncol=(k+1))  SS2=matrix(rnorm((supp[[2]][1,2]-supp[[2]][1,1]+1)*(k+1)),ncol=(k+1))  SS3=matrix(rnorm((supp[[3]][1,2]-supp[[3]][1,1]+1)*(k+1)),ncol=(k+1))   spl=construct(xi,k,SS1,supp[[1]]) #constructing the first correct spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.311759 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> The matrix derivative is now corrected by method RRM . nspl=construct(xi,k,SS2,supp[[2]],'CRFC') #>  #> Using  method CRFC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.29385 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method.The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative at the central knot is not equal to zero. #> It has been made equal to zero now. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRFC .  #See 'gather' function for more details on what follows spl=gather(spl,nspl) #the second and the first ones nspl=construct(xi,k,SS3,supp[[3]],'CRLC') #>  #> Using  method CRLC to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 , support 1  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.646284 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method.The zero boundary conditions are not satisfied. #> The correction of the first and last rows of the derivative matrix has been made. #>  #>  #> The highest order derivative is not symmetrically defined at the center. #>           The values at the two central knots should be equal. #> The highest order derivative values at the two central knots #>           have been made equal by averaging the two central values. #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The matrix derivative is now corrected by method CRLC . spl=gather(spl,nspl) #the third is added  #Replicating by subsampling with replacement sz=length(spl@der) ss=sample(1:sz,size=10,rep=TRUE)  spl=subsample(spl,ss) is.splinets(spl)[[1]] #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #>  #> The matrix of derivatives at the knots for spline 3 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 3.272174e-07 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 3  support 1 has the derivative matrix corrected by the RRM method. #> The matrix of derivatives at the knots for spline 5 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 3.272174e-07 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 5  support 1 has the derivative matrix corrected by the RRM method. #> The matrix of derivatives at the knots for spline 6 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 3.272174e-07 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 6  support 1 has the derivative matrix corrected by the RRM method. #> The matrix of derivatives at the knots for spline 7 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 3.272174e-07 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 7  support 1 has the derivative matrix corrected by the RRM method. #> [1] FALSE  spl@supp #> [[1]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[2]] #>      [,1] [,2] #> [1,]    6   25 #>  #> [[3]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[4]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[5]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[6]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[7]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[8]] #>      [,1] [,2] #> [1,]    6   25 #>  #> [[9]] #>      [,1] [,2] #> [1,]    2   12 #>  #> [[10]] #>      [,1] [,2] #> [1,]    6   25 #>  spl@der #> [[1]] #>              [,1]        [,2]         [,3]          [,4] #>  [1,]  0.00000000   0.0000000     0.000000 -1.701607e+04 #>  [2,] -0.18861400 -13.9660365  -689.415684  8.006952e+04 #>  [3,] -0.52285124  -9.5045431  1090.758120 -6.718437e+04 #>  [4,] -0.58130959  -0.6501706     1.545744 -1.009533e+00 #>  [5,] -0.59556091  -0.6156176     1.523010 -2.000473e+00 #>  [6,] -0.60290798  -0.5973131     1.498774  0.000000e+00 #>  [7,] -0.62170714  -0.5481955     1.494093 -1.426081e-01 #>  [8,] -0.63737252  -0.5029851     1.540283  1.550060e+00 #>  [9,] -0.63323135   5.4788975  4307.928400  1.551204e+06 #> [10,] -0.02086494  10.9898246 -3858.985284 -3.326554e+05 #> [11,]  0.00000000   0.0000000     0.000000  6.775253e+05 #>  #> [[2]] #>               [,1]       [,2]        [,3]          [,4] #>  [1,]  0.000000000  0.0000000    0.000000 -6.115597e+04 #>  [2,] -0.018124452 -4.4880780 -740.908607  3.970527e+04 #>  [3,] -0.330537636 -7.4186308  562.342214 -1.883325e+04 #>  [4,] -0.384988728  0.9768266    1.134166  3.320349e-01 #>  [5,] -0.382272531  0.9799765    1.135087  1.572288e+00 #>  [6,] -0.357867495  1.0083175    1.173688 -1.069471e+00 #>  [7,] -0.352105409  1.0149851    1.167597  9.162865e-01 #>  [8,] -0.346805381  1.0210763    1.172367 -5.949929e-01 #>  [9,] -0.309577061  1.0625867    1.151107  2.181647e+00 #> [10,] -0.301041386  1.0718631    1.168556  3.314296e-02 #> [11,] -0.214273504  1.1627137    1.171130  3.314296e-02 #> [12,] -0.182175832  1.1949644    1.197662  9.743826e-01 #> [13,] -0.175861339  1.2012589    1.190998 -1.264473e+00 #> [14,] -0.073105262  1.2982348    1.168191 -2.774214e-01 #> [15,] -0.017615961  1.3470762    1.160245 -1.893987e-01 #> [16,] -0.011188490  1.3525965    1.158416 -3.840249e-01 #> [17,]  0.025061016  1.3835517    1.178040  7.405880e-01 #> [18,]  0.067815404  0.2229417  -55.743323 -1.338059e+03 #> [19,]  0.007379618 -0.6149995   34.168383  1.157503e+03 #> [20,]  0.000000000  0.0000000    0.000000 -9.491701e+02 #>  #> [[3]] #>                [,1]          [,2]          [,3]         [,4] #>  [1,]  0.000000e+00  0.000000e+00  0.000000e+00  -2535361836 #>  [2,] -1.800618e+03 -3.331951e+05 -4.110402e+07   6338705399 #>  [3,] -7.661648e+03  3.484016e+05  1.016387e+08 -13560055910 #>  [4,] -4.602446e-01  5.846235e+05 -6.264228e+07   2469520918 #>  [5,] -7.243285e-01 -1.412136e+05  1.841509e+07   -899614499 #>  [6,] -6.921116e-02  8.119456e+03 -8.392332e+06   3177689711 #>  [7,]  1.463249e+00 -2.933671e+03  4.294365e+05    -23789154 #>  [8,]  1.877261e-01  4.400007e+02 -1.546032e+05     27144223 #>  [9,]  1.022023e+00 -2.796661e-01  2.387233e+00            0 #> [10,] -5.918348e-01 -9.294155e+02 -3.569389e+05    -68561227 #> [11,] -1.122007e-01  8.276058e+03  8.721990e+05     34399415 #> [12,] -9.249531e-01 -2.034494e+04 -8.029150e+06  -1112933354 #> [13,]  7.533048e-01  3.525286e+05  1.763181e+07    330424825 #> [14,] -1.126091e-01 -9.452061e+05 -1.129498e+08  -4795574597 #> [15,] -5.802955e+03 -1.115047e+06  4.849832e+07  30633231265 #> [16,] -4.150852e+03  2.968282e+05 -1.415082e+07   -762050940 #> [17,]  0.000000e+00  0.000000e+00  0.000000e+00    337309290 #>  #> [[4]] #>              [,1]        [,2]         [,3]          [,4] #>  [1,]  0.00000000   0.0000000     0.000000 -1.701607e+04 #>  [2,] -0.18861400 -13.9660365  -689.415684  8.006952e+04 #>  [3,] -0.52285124  -9.5045431  1090.758120 -6.718437e+04 #>  [4,] -0.58130959  -0.6501706     1.545744 -1.009533e+00 #>  [5,] -0.59556091  -0.6156176     1.523010 -2.000473e+00 #>  [6,] -0.60290798  -0.5973131     1.498774  0.000000e+00 #>  [7,] -0.62170714  -0.5481955     1.494093 -1.426081e-01 #>  [8,] -0.63737252  -0.5029851     1.540283  1.550060e+00 #>  [9,] -0.63323135   5.4788975  4307.928400  1.551204e+06 #> [10,] -0.02086494  10.9898246 -3858.985284 -3.326554e+05 #> [11,]  0.00000000   0.0000000     0.000000  6.775253e+05 #>  #> [[5]] #>                [,1]          [,2]          [,3]         [,4] #>  [1,]  0.000000e+00  0.000000e+00  0.000000e+00  -2535361836 #>  [2,] -1.800618e+03 -3.331951e+05 -4.110402e+07   6338705399 #>  [3,] -7.661648e+03  3.484016e+05  1.016387e+08 -13560055910 #>  [4,] -4.602446e-01  5.846235e+05 -6.264228e+07   2469520918 #>  [5,] -7.243285e-01 -1.412136e+05  1.841509e+07   -899614499 #>  [6,] -6.921116e-02  8.119456e+03 -8.392332e+06   3177689711 #>  [7,]  1.463249e+00 -2.933671e+03  4.294365e+05    -23789154 #>  [8,]  1.877261e-01  4.400007e+02 -1.546032e+05     27144223 #>  [9,]  1.022023e+00 -2.796661e-01  2.387233e+00            0 #> [10,] -5.918348e-01 -9.294155e+02 -3.569389e+05    -68561227 #> [11,] -1.122007e-01  8.276058e+03  8.721990e+05     34399415 #> [12,] -9.249531e-01 -2.034494e+04 -8.029150e+06  -1112933354 #> [13,]  7.533048e-01  3.525286e+05  1.763181e+07    330424825 #> [14,] -1.126091e-01 -9.452061e+05 -1.129498e+08  -4795574597 #> [15,] -5.802955e+03 -1.115047e+06  4.849832e+07  30633231265 #> [16,] -4.150852e+03  2.968282e+05 -1.415082e+07   -762050940 #> [17,]  0.000000e+00  0.000000e+00  0.000000e+00    337309290 #>  #> [[6]] #>                [,1]          [,2]          [,3]         [,4] #>  [1,]  0.000000e+00  0.000000e+00  0.000000e+00  -2535361836 #>  [2,] -1.800618e+03 -3.331951e+05 -4.110402e+07   6338705399 #>  [3,] -7.661648e+03  3.484016e+05  1.016387e+08 -13560055910 #>  [4,] -4.602446e-01  5.846235e+05 -6.264228e+07   2469520918 #>  [5,] -7.243285e-01 -1.412136e+05  1.841509e+07   -899614499 #>  [6,] -6.921116e-02  8.119456e+03 -8.392332e+06   3177689711 #>  [7,]  1.463249e+00 -2.933671e+03  4.294365e+05    -23789154 #>  [8,]  1.877261e-01  4.400007e+02 -1.546032e+05     27144223 #>  [9,]  1.022023e+00 -2.796661e-01  2.387233e+00            0 #> [10,] -5.918348e-01 -9.294155e+02 -3.569389e+05    -68561227 #> [11,] -1.122007e-01  8.276058e+03  8.721990e+05     34399415 #> [12,] -9.249531e-01 -2.034494e+04 -8.029150e+06  -1112933354 #> [13,]  7.533048e-01  3.525286e+05  1.763181e+07    330424825 #> [14,] -1.126091e-01 -9.452061e+05 -1.129498e+08  -4795574597 #> [15,] -5.802955e+03 -1.115047e+06  4.849832e+07  30633231265 #> [16,] -4.150852e+03  2.968282e+05 -1.415082e+07   -762050940 #> [17,]  0.000000e+00  0.000000e+00  0.000000e+00    337309290 #>  #> [[7]] #>                [,1]          [,2]          [,3]         [,4] #>  [1,]  0.000000e+00  0.000000e+00  0.000000e+00  -2535361836 #>  [2,] -1.800618e+03 -3.331951e+05 -4.110402e+07   6338705399 #>  [3,] -7.661648e+03  3.484016e+05  1.016387e+08 -13560055910 #>  [4,] -4.602446e-01  5.846235e+05 -6.264228e+07   2469520918 #>  [5,] -7.243285e-01 -1.412136e+05  1.841509e+07   -899614499 #>  [6,] -6.921116e-02  8.119456e+03 -8.392332e+06   3177689711 #>  [7,]  1.463249e+00 -2.933671e+03  4.294365e+05    -23789154 #>  [8,]  1.877261e-01  4.400007e+02 -1.546032e+05     27144223 #>  [9,]  1.022023e+00 -2.796661e-01  2.387233e+00            0 #> [10,] -5.918348e-01 -9.294155e+02 -3.569389e+05    -68561227 #> [11,] -1.122007e-01  8.276058e+03  8.721990e+05     34399415 #> [12,] -9.249531e-01 -2.034494e+04 -8.029150e+06  -1112933354 #> [13,]  7.533048e-01  3.525286e+05  1.763181e+07    330424825 #> [14,] -1.126091e-01 -9.452061e+05 -1.129498e+08  -4795574597 #> [15,] -5.802955e+03 -1.115047e+06  4.849832e+07  30633231265 #> [16,] -4.150852e+03  2.968282e+05 -1.415082e+07   -762050940 #> [17,]  0.000000e+00  0.000000e+00  0.000000e+00    337309290 #>  #> [[8]] #>               [,1]       [,2]        [,3]          [,4] #>  [1,]  0.000000000  0.0000000    0.000000 -6.115597e+04 #>  [2,] -0.018124452 -4.4880780 -740.908607  3.970527e+04 #>  [3,] -0.330537636 -7.4186308  562.342214 -1.883325e+04 #>  [4,] -0.384988728  0.9768266    1.134166  3.320349e-01 #>  [5,] -0.382272531  0.9799765    1.135087  1.572288e+00 #>  [6,] -0.357867495  1.0083175    1.173688 -1.069471e+00 #>  [7,] -0.352105409  1.0149851    1.167597  9.162865e-01 #>  [8,] -0.346805381  1.0210763    1.172367 -5.949929e-01 #>  [9,] -0.309577061  1.0625867    1.151107  2.181647e+00 #> [10,] -0.301041386  1.0718631    1.168556  3.314296e-02 #> [11,] -0.214273504  1.1627137    1.171130  3.314296e-02 #> [12,] -0.182175832  1.1949644    1.197662  9.743826e-01 #> [13,] -0.175861339  1.2012589    1.190998 -1.264473e+00 #> [14,] -0.073105262  1.2982348    1.168191 -2.774214e-01 #> [15,] -0.017615961  1.3470762    1.160245 -1.893987e-01 #> [16,] -0.011188490  1.3525965    1.158416 -3.840249e-01 #> [17,]  0.025061016  1.3835517    1.178040  7.405880e-01 #> [18,]  0.067815404  0.2229417  -55.743323 -1.338059e+03 #> [19,]  0.007379618 -0.6149995   34.168383  1.157503e+03 #> [20,]  0.000000000  0.0000000    0.000000 -9.491701e+02 #>  #> [[9]] #>              [,1]        [,2]         [,3]          [,4] #>  [1,]  0.00000000   0.0000000     0.000000 -1.701607e+04 #>  [2,] -0.18861400 -13.9660365  -689.415684  8.006952e+04 #>  [3,] -0.52285124  -9.5045431  1090.758120 -6.718437e+04 #>  [4,] -0.58130959  -0.6501706     1.545744 -1.009533e+00 #>  [5,] -0.59556091  -0.6156176     1.523010 -2.000473e+00 #>  [6,] -0.60290798  -0.5973131     1.498774  0.000000e+00 #>  [7,] -0.62170714  -0.5481955     1.494093 -1.426081e-01 #>  [8,] -0.63737252  -0.5029851     1.540283  1.550060e+00 #>  [9,] -0.63323135   5.4788975  4307.928400  1.551204e+06 #> [10,] -0.02086494  10.9898246 -3858.985284 -3.326554e+05 #> [11,]  0.00000000   0.0000000     0.000000  6.775253e+05 #>  #> [[10]] #>               [,1]       [,2]        [,3]          [,4] #>  [1,]  0.000000000  0.0000000    0.000000 -6.115597e+04 #>  [2,] -0.018124452 -4.4880780 -740.908607  3.970527e+04 #>  [3,] -0.330537636 -7.4186308  562.342214 -1.883325e+04 #>  [4,] -0.384988728  0.9768266    1.134166  3.320349e-01 #>  [5,] -0.382272531  0.9799765    1.135087  1.572288e+00 #>  [6,] -0.357867495  1.0083175    1.173688 -1.069471e+00 #>  [7,] -0.352105409  1.0149851    1.167597  9.162865e-01 #>  [8,] -0.346805381  1.0210763    1.172367 -5.949929e-01 #>  [9,] -0.309577061  1.0625867    1.151107  2.181647e+00 #> [10,] -0.301041386  1.0718631    1.168556  3.314296e-02 #> [11,] -0.214273504  1.1627137    1.171130  3.314296e-02 #> [12,] -0.182175832  1.1949644    1.197662  9.743826e-01 #> [13,] -0.175861339  1.2012589    1.190998 -1.264473e+00 #> [14,] -0.073105262  1.2982348    1.168191 -2.774214e-01 #> [15,] -0.017615961  1.3470762    1.160245 -1.893987e-01 #> [16,] -0.011188490  1.3525965    1.158416 -3.840249e-01 #> [17,]  0.025061016  1.3835517    1.178040  7.405880e-01 #> [18,]  0.067815404  0.2229417  -55.743323 -1.338059e+03 #> [19,]  0.007379618 -0.6149995   34.168383  1.157503e+03 #> [20,]  0.000000000  0.0000000    0.000000 -9.491701e+02 #>   #Subsampling without replacements ss=c(3,8,1) sspl=subsample(spl,ss)  sspl@supp #> [[1]] #>      [,1] [,2] #> [1,]    4   20 #>  #> [[2]] #>      [,1] [,2] #> [1,]    6   25 #>  #> [[3]] #>      [,1] [,2] #> [1,]    2   12 #>  sspl@der #> [[1]] #>                [,1]          [,2]          [,3]         [,4] #>  [1,]  0.000000e+00  0.000000e+00  0.000000e+00  -2535361836 #>  [2,] -1.800618e+03 -3.331951e+05 -4.110402e+07   6338705399 #>  [3,] -7.661648e+03  3.484016e+05  1.016387e+08 -13560055910 #>  [4,] -4.602446e-01  5.846235e+05 -6.264228e+07   2469520918 #>  [5,] -7.243285e-01 -1.412136e+05  1.841509e+07   -899614499 #>  [6,] -6.921116e-02  8.119456e+03 -8.392332e+06   3177689711 #>  [7,]  1.463249e+00 -2.933671e+03  4.294365e+05    -23789154 #>  [8,]  1.877261e-01  4.400007e+02 -1.546032e+05     27144223 #>  [9,]  1.022023e+00 -2.796661e-01  2.387233e+00            0 #> [10,] -5.918348e-01 -9.294155e+02 -3.569389e+05    -68561227 #> [11,] -1.122007e-01  8.276058e+03  8.721990e+05     34399415 #> [12,] -9.249531e-01 -2.034494e+04 -8.029150e+06  -1112933354 #> [13,]  7.533048e-01  3.525286e+05  1.763181e+07    330424825 #> [14,] -1.126091e-01 -9.452061e+05 -1.129498e+08  -4795574597 #> [15,] -5.802955e+03 -1.115047e+06  4.849832e+07  30633231265 #> [16,] -4.150852e+03  2.968282e+05 -1.415082e+07   -762050940 #> [17,]  0.000000e+00  0.000000e+00  0.000000e+00    337309290 #>  #> [[2]] #>               [,1]       [,2]        [,3]          [,4] #>  [1,]  0.000000000  0.0000000    0.000000 -6.115597e+04 #>  [2,] -0.018124452 -4.4880780 -740.908607  3.970527e+04 #>  [3,] -0.330537636 -7.4186308  562.342214 -1.883325e+04 #>  [4,] -0.384988728  0.9768266    1.134166  3.320349e-01 #>  [5,] -0.382272531  0.9799765    1.135087  1.572288e+00 #>  [6,] -0.357867495  1.0083175    1.173688 -1.069471e+00 #>  [7,] -0.352105409  1.0149851    1.167597  9.162865e-01 #>  [8,] -0.346805381  1.0210763    1.172367 -5.949929e-01 #>  [9,] -0.309577061  1.0625867    1.151107  2.181647e+00 #> [10,] -0.301041386  1.0718631    1.168556  3.314296e-02 #> [11,] -0.214273504  1.1627137    1.171130  3.314296e-02 #> [12,] -0.182175832  1.1949644    1.197662  9.743826e-01 #> [13,] -0.175861339  1.2012589    1.190998 -1.264473e+00 #> [14,] -0.073105262  1.2982348    1.168191 -2.774214e-01 #> [15,] -0.017615961  1.3470762    1.160245 -1.893987e-01 #> [16,] -0.011188490  1.3525965    1.158416 -3.840249e-01 #> [17,]  0.025061016  1.3835517    1.178040  7.405880e-01 #> [18,]  0.067815404  0.2229417  -55.743323 -1.338059e+03 #> [19,]  0.007379618 -0.6149995   34.168383  1.157503e+03 #> [20,]  0.000000000  0.0000000    0.000000 -9.491701e+02 #>  #> [[3]] #>              [,1]        [,2]         [,3]          [,4] #>  [1,]  0.00000000   0.0000000     0.000000 -1.701607e+04 #>  [2,] -0.18861400 -13.9660365  -689.415684  8.006952e+04 #>  [3,] -0.52285124  -9.5045431  1090.758120 -6.718437e+04 #>  [4,] -0.58130959  -0.6501706     1.545744 -1.009533e+00 #>  [5,] -0.59556091  -0.6156176     1.523010 -2.000473e+00 #>  [6,] -0.60290798  -0.5973131     1.498774  0.000000e+00 #>  [7,] -0.62170714  -0.5481955     1.494093 -1.426081e-01 #>  [8,] -0.63737252  -0.5029851     1.540283  1.550060e+00 #>  [9,] -0.63323135   5.4788975  4307.928400  1.551204e+06 #> [10,] -0.02086494  10.9898246 -3858.985284 -3.326554e+05 #> [11,]  0.00000000   0.0000000     0.000000  6.775253e+05 #>   is.splinets(sspl)[[1]] #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 3.272174e-07 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> [1] FALSE  #A single spline sampled from a 'Splinets' object is.splinets(subsample(sspl,1)) #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 3.272174e-07 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> $is #> [1] FALSE #>  #> $robject #> splines #> Knots: 27 non-equaly distributed knots between 0 and 1  #> Size: 1 spline functions #> Order: 3  #> Support: Not the full range support, a single support interval for each spline. #> $Er #> [1] 4.818204e-12 #>"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/sym2one.html","id":null,"dir":"Reference","previous_headings":"","what":"Switching between representations of the matrices of derivatives — sym2one","title":"Switching between representations of the matrices of derivatives — sym2one","text":"technical useful transformation matrix derivatives form one-sided symmetric representations, reverse one. allows switching standard representation matrix derivatives Splinets symmetric around central knot(s) one-sided yields RHS limits knots, convenient computations.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/sym2one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switching between representations of the matrices of derivatives — sym2one","text":"","code":"sym2one(S, supp = NULL, inv = FALSE)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/sym2one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switching between representations of the matrices of derivatives — sym2one","text":"S (m+2) x (k+1) numeric matrix, derivatives one two representations; supp (Nsupp x 2) NULL matrix, row-wise endpoint indices support intervals; equal NULL (also default), full support assumed. inv logical; FALSE (default), function assumes input symmetric format transforms left--right format. TRUE, inverse transformation applied.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/sym2one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switching between representations of the matrices of derivatives — sym2one","text":"matrix respective transformation input.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/sym2one.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Switching between representations of the matrices of derivatives — sym2one","text":"transformation essentially changes last column S, .e. highest (discontinuous) derivatives one-sided representation yields right-hand-side limit. expected number rows S total size support indicated supp, .e. supp!=NULL, sum(supp[,2]-supp[,1]+1)=m+2. latter true, derivative submatrices components S reversed. However, condition formally checked code, may lead switch representations parts matrix S.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/sym2one.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Switching between representations of the matrices of derivatives — sym2one","text":"Liu, X., Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. \"Dyadic diagonalization positive definite band matrices efficient B-spline orthogonalization.\" Journal Computational Applied Mathematics (2022) <https://doi.org/10.1016/j.cam.2022.114444>. Podg\\(\\mbox{\\'o}\\)rski, K. (2021) \"Splinets – splines Taylor expansion, support sets orthogonal bases.\" <arXiv:2102.00733>. Nassar, H., Podg\\(\\mbox{\\'o}\\)rski, K. (2023) \"Splinets 1.5.0 – Periodic Splinets.\" <arXiv:2302.07552>","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/sym2one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switching between representations of the matrices of derivatives — sym2one","text":"","code":"#-----------------------------------------------------# #-------Representations of derivatives at knots-------# #-----------------------------------------------------# n=10; k=3; xi=seq(0,1,by=1/(n+1)) #the even number of equally spaced knots  set.seed(5) S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl=construct(xi,k,S) #construction of a spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative is not symmetrically defined at the center (the values at the two central knots should be equal). #> Spline 1 's highest derivative values at the two central knots have been made equal by averaging the two central values in SLOT 'der'. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.383861 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM . a=spl@der[[1]] b=sym2one(a) aa=sym2one(b,inv=TRUE) # matrix 'aa' is the same as 'a'  n=11; xi2=seq(0,1,by=1/(n+1)) #the odd number of knots case S2=matrix(rnorm((n+2)*(k+1)),ncol=(k+1)) spl2=construct(xi2,k,S2) #construction of a spline #>  #> Using  method RRM to correct the derivative matrix entries. #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #> The support sets for the splines are equal to the entire range of knots. #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices are made in the output 'Splinets' object. #>  #> Spline 1 's highest derivative at the central knot is not equal to zero. #> Spline 1 's highest derivative value at the central knot has been made equal to zero. #>  #> The matrix of derivatives at the knots for spline 1 does not satisfy the conditions  #>  #>           required for a spline (up to the accuracy SLOT 'epsilon'). #>  #>           One of the reasons can be that SLOT 'taylor' is not correctly given. #> The computed standard error per matrix entry is 1.157913 . #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  has the derivative matrix corrected by the RRM method #>  given that SLOT 'taylor' is properly given. #> The matrix derivative is now corrected by method RRM . a2=spl2@der[[1]] b2=sym2one(a2) aa2=sym2one(b2, inv=TRUE) # matrix 'aa2' is the same as 'a2'  #-----------------------------------------------------# #--------------More complex support sets--------------# #-----------------------------------------------------# #Zero order splines, non-equidistant case, support with three components n=43; xi=seq(0,1,by=1/(n+1)); k=3; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1; support=list(matrix(c(2,14,17,30,32,43),ncol=2,byrow = TRUE)) #Third order splines ssp=new(\"Splinets\",knots=xi,supp=support,smorder=k) #with partial support  m=sum(ssp@supp[[1]][,2]-ssp@supp[[1]][,1]+1) #the total number of knots in the support ssp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1)))  #the derivative matrix at random IS=is.splinets(ssp)  #>  #>  #> DIAGNOSTIC CHECK of a SPLINETS object #>  #> THE KNOTS:   #>  #>  #> THE SUPPORT SETS:   #>  #>  #>  #> THE DERIVATIVES AT THE KNOTS:   #>  #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 1 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 2 of spline 1 in the output 'Splinets' object. #> The boundary zero conditions are not satisfied for spline 1 in the input 'Splinets' object. #> Correction of the first and last rows of the derivative matrices over the support component 3 of spline 1 in the output 'Splinets' object. #>  #> Spline 1 support 1 's highest derivative at the central knot is not zero. #> Now it is set to zero. #>  #> The matrix of derivatives at the knots for spline 1 , support 1  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.492997 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 1 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 2  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 2  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.148768 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 1 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 1 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 2 has the derivative matrix corrected by the RRM method. #> Spline 1 , support 3  - highest derivative is not symmetric at the center (equal values at the two central knots). #> The two values have been made equal by averaging. #>  #> The matrix of derivatives at the knots for spline 1 , support 3  does not satisfy the splie conditions (up to the accuracy set in SLOT 'epsilon'). #> The computed standard error per matrix entry is 1.601748 . #>  #>  #> Correction of the LHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the RHS part of the matrix #> There are less than 5 knots, the first 2 entries of the 5 nd row counting from the end in the input will be changed in the output. #>  #>  #> Correction of the LHS part of the matrix #> Correction of the RHS part of the matrix #> The output object Spline 1  support 3 has the derivative matrix corrected by the RRM method. IS$robject@der #> [[1]] #>               [,1]         [,2]          [,3]          [,4] #>  [1,]  0.000000000   0.00000000  0.000000e+00  2.602891e+07 #>  [2,]  0.020169442  36.25368071  4.344293e+04 -1.133425e+07 #>  [3,]  0.452070889 116.91998071 -7.661883e+03  2.487946e+05 #>  [4,]  1.630578457  -1.05775009 -1.857767e-01 -8.839958e-02 #>  [5,]  1.605482003  -1.06217347 -1.878697e-01 -2.694659e+02 #>  [6,]  1.600437999  -1.06609441 -1.465747e+00  9.770884e-02 #>  [7,]  1.594683523  -1.07397554 -1.465221e+00  0.000000e+00 #>  [8,]  1.577314990  -1.09727433 -1.447437e+00  1.111619e+00 #>  [9,]  1.555766871  -1.10351300  8.081351e-01  1.155689e+02 #> [10,]  1.528859115  -1.08310035  8.507972e-01  1.733572e+00 #> [11,]  1.517330148 -17.18082778 -1.800946e+04 -1.007411e+07 #> [12,]  0.348403322 -73.44339875  1.032124e+04  1.935679e+06 #> [13,]  0.000000000   0.00000000  0.000000e+00 -7.252391e+05 #> [14,]  0.000000000   0.00000000  0.000000e+00 -8.107931e+03 #> [15,] -0.023141799  -2.69342936 -2.089887e+02  5.145988e+03 #> [16,] -0.379094229  -5.91164232  1.027351e+02 -1.182501e+03 #> [17,] -0.633041558  -1.44923541  9.547868e-01 -1.245056e+00 #> [18,] -0.648147346  -1.43931725  9.417646e-01  2.184919e+03 #> [19,] -0.676410037  -0.84951596  5.077620e+01 -1.488525e+03 #> [20,] -0.685692768   0.01651311 -1.038042e-01 -1.500139e+00 #> [21,] -0.685466074   0.01485930 -1.254480e-01 -1.500139e+00 #> [22,] -0.673722335   1.39097073  1.109865e+02  4.475646e+03 #> [23,] -0.666343314   1.64910142 -1.544657e+00 -2.385537e+04 #> [24,] -0.610172067   1.59545238 -1.554262e+00 -2.773949e-01 #> [25,] -0.549315902   3.58114751  1.484087e+02  5.545347e+03 #> [26,] -0.019535704   2.26930738 -1.757383e+02 -3.376473e+03 #> [27,]  0.000000000   0.00000000  0.000000e+00  6.804706e+03 #> [28,]  0.000000000   0.00000000  0.000000e+00  4.724698e+03 #> [29,]  0.030551709   2.70740062  1.599478e+02 -3.216931e+04 #> [30,]  0.063906965   2.43697547 -2.073212e+02  1.884581e+04 #> [31,]  0.082396860   1.29662506  6.436154e-01 -4.384008e-01 #> [32,]  0.084463485   1.29764993  6.429170e-01  2.080547e+02 #> [33,]  0.087591557   1.29980214  1.144070e+00  7.453307e-01 #> [34,]  0.113611057   1.32265181  1.158860e+00  7.453307e-01 #> [35,]  0.164496395   1.37723487  1.733344e+00  1.522015e+01 #> [36,]  0.174588409   1.38990312  1.740164e+00  9.349643e-01 #> [37,]  0.176698633  -2.49013668 -3.787662e+02 -1.848703e+04 #> [38,]  0.009774724  -2.37641018  3.851652e+02  2.149187e+04 #> [39,]  0.000000000   0.00000000  0.000000e+00 -3.121351e+04 #>  IS$robject@supp #> [[1]] #>      [,1] [,2] #> [1,]    2   14 #> [2,]   17   30 #> [3,]   32   43 #>  b=sym2one(IS$robject@der[[1]],IS$robject@supp[[1]]) #the RHS limits at the knots a=sym2one(b,IS$robject@supp[[1]],inv=TRUE) #is the same as the SLOT supp in IS@robject"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/tire.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on tire responses to a rough road profile — tire","title":"Data on tire responses to a rough road profile — tire","text":"simulated data tire responses rough road high-transient event. simulations made based fit -called Slepian model non-Gaussian rough road profile. details can found reference. responses provided measured wheel thus describing tire response. 100 functional measurments, kept column-wise matrix. Additionally, time instants measurements given first column matrix. Since package uses -called \"lazy load\", matrix directly available without explicit load data. means data(tire) need invoked. data saved using compress='xz' option, requires 3.5 higher version R. data uploaded dataframe, thus .matrix(tire) needed matrix form required.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/tire.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data on tire responses to a rough road profile — tire","text":"","code":"data(tire)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/tire.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on tire responses to a rough road profile — tire","text":"numerical 4095 x 101 dataframe: tire","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/tire.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data on tire responses to a rough road profile — tire","text":"Podg\\(\\mbox{\\'o}\\)rski, K, Rychlik, . Wallin, J. (2015)  Slepian noise approach gaussian Laplace moving average processes.  Extremes, 18(4):665–695, <doi:10.1007/s10687-015-0227-z>.","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/tire.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data on tire responses to a rough road profile — tire","text":"","code":"#-----------------------------------------------------# #----------- Plotting the trucktire data -------------# #-----------------------------------------------------#  #Activating data:  data(tire)  data(truck)    matplot(tire[,1],tire[,2:11],type='l',lty=1) #ploting the first 10 tire responses     matplot(truck[,1],truck[,2:11],type='l',lty=1) #ploting the first 10 truck responses     #Projecting truck data into splinet bases  knots1=seq(0,50, by=2)  Subtruck= truck[2048:3080,] # selecting the truck data that in the interval[0,50]  TruckProj=project(as.matrix(Subtruck),knots1)    MeanTruck=matrix(colMeans(TruckProj$coeff),ncol=dim(TruckProj$coeff)[2])  MeanTruckSp=lincomb(TruckProj$basis,MeanTruck)    plot(MeanTruckSp) #the mean spline of the projections     plot(TruckProj$sp,sID=1:10) #the first ten projections of the functional data     Sigma=cov(TruckProj$coeff)  Spect=eigen(Sigma,symmetric = TRUE)    plot(Spect$values, type ='l',col='blue', lwd=4 ) #the eigenvalues     EigenTruckSp=lincomb(TruckProj$basis,t(Spect$vec))  plot(EigenTruckSp,sID=1:5) #the first five largest eigenfunctions"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/truck.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on truck responses to a rough road profile — truck","title":"Data on truck responses to a rough road profile — truck","text":"simulated data truck responses rough road high transient event. simulations made based fit -called Slepian model non-Gaussian rough road profile. Details can found reference. responses provided driver seat. 100 functional measurments, kept column-wise matrix. Additionally, time instants measurements given first column matrix. Since package uses -called \"lazy load\", matrix directly available without explicit load data, thus data(truck) need invoked. Data saved using compress='xz' option, requires 3.5 higher version R. data uploaded dataframe, thus .matrix(tire) needed matrix form required.","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/truck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data on truck responses to a rough road profile — truck","text":"","code":"data(truck)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/truck.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on truck responses to a rough road profile — truck","text":"numerical 4095 x 101 dataframe: truck","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/truck.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data on truck responses to a rough road profile — truck","text":"Podg\\(\\mbox{\\'o}\\)rski, K, Rychlik, . Wallin, J. (2015)  Slepian noise approach gaussian Laplace moving average processes.  Extremes, 18(4):665–695, <doi:10.1007/s10687-015-0227-z>.","code":""},{"path":[]},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/truck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data on truck responses to a rough road profile — truck","text":"","code":"#-----------------------------------------------------# #----------- Plotting the trucktire data -------------# #-----------------------------------------------------#  #Activating data:  data(tire)  data(truck)    matplot(tire[,1],tire[,2:11],type='l',lty=1) #ploting the first 10 tire responses     matplot(truck[,1],truck[,2:11],type='l',lty=1) #ploting the first 10 truck responses     #Projecting truck data into splinet bases  knots1=seq(0,50, by=2)  Subtruck= truck[2048:3080,] # selecting the truck data that in the interval[0,50]  TruckProj=project(as.matrix(Subtruck),knots1)    MeanTruck=matrix(colMeans(TruckProj$coeff),ncol=dim(TruckProj$coeff)[2])  MeanTruckSp=lincomb(TruckProj$basis,MeanTruck)    plot(MeanTruckSp) #the mean spline of the projections     plot(TruckProj$sp,sID=1:10) #the first ten projections of the functional data     Sigma=cov(TruckProj$coeff)  Spect=eigen(Sigma,symmetric = TRUE)    plot(Spect$values, type ='l',col='blue', lwd=4 ) #the eigenvalues     EigenTruckSp=lincomb(TruckProj$basis,t(Spect$vec))  plot(EigenTruckSp,sID=1:5) #the first five largest eigenfunctions"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/wind.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on wind direction and speed. — wind","title":"Data on wind direction and speed. — wind","text":"NASA/POWER CERES/MERRA2 Native Resolution Hourly Data Dates: 01/01/2015 03/05/2015 Location: Latitude  25.7926   Longitude -80.3239 Elevation MERRA-2: Average 0.5 x 0.625 degree lat/lon region = 5.4 meters Data frame fields: YEAR – Year measurement MO – Month measurement DY – Day measurement HR – Hour measurement WD10M – MERRA-2 Wind Direction 10 Meters (Degrees) WS50M – MERRA-2 Wind Speed 50 Meters (m/s) WD50M – MERRA-2 Wind Direction 50 Meters (Degrees) WS10M – MERRA-2 Wind Speed 10 Meters (m/s)","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/wind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data on wind direction and speed. — wind","text":"","code":"data(wind)"},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/wind.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on wind direction and speed. — wind","text":"numerical 1536 x 8 dataframe: wind","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/wind.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data on wind direction and speed. — wind","text":"data obtained National Aeronautics Space Administration (NASA) Langley Research Center (LaRC) Prediction Worldwide Energy Resource (POWER) Project funded NASA Earth Science/Applied Science Program. https://power.larc.nasa.gov/data-access-viewer/","code":""},{"path":"list(text = \"GitHub\", href = \"https://ranibasna.github.io/R-Splinets/\", icon = \"fab fa-github\")/reference/wind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data on wind direction and speed. — wind","text":"","code":"#------------------------------------------------# #----------- Plotting the Wind data -------------# #------------------------------------------------#  data(wind) #activating the data  wind1=wind[,-1] #Removing YEAR as irrelevant  #Transforming data to daily with the periodic form, i.e. the arguments in [0,1],  #which is required in the periodic case.  numbdays=length(wind1[,1])/24   Days=vector(mode='list', length=numbdays)  for(i in 1:numbdays){   Days[[i]]=wind1[i*(1:24),]   Days[[i]][,c(4,6)]=Days[[i]][,c(4,6)]/360 #the direction in [0,1] }  #Raw discretized data for the first day   par(mfrow=c(2,2)) hist(Days[[1]][,4],xlim=c(0,1),xlab='Wind direction',main='First day 10[m]') hist(Days[[1]][,6],xlim=c(0,1),xlab='Wind direction',main='First day 50[m]')  plot(Days[[1]][,4],Days[[1]][,5],xlim=c(0,1),pch='.',cex=4,xlab='Wind direction',ylab='Wind speed') plot(Days[[1]][,6],Days[[1]][,7],xlim=c(0,1),pch='.',cex=4,xlab='Wind direction',ylab='Wind speed')   #First Day Data: #Projections of the histograms to the periodic spline form   FirstDayDataF1=cbind(hist(Days[[1]][,4],xlim=c(0,1),breaks=seq(0,1,by=0.1))$mids, hist(Days[[1]][,4],xlim=c(0,1),breaks=seq(0,1,by=0.1))$counts)   k=3 N=2  n_knots=2^N*k-1 #the number of internal knots for the dyadic case xi = seq(0, 1, length.out = n_knots+2)  #Note that the range of the argument is assumed to be between 0 and 1  PrF1=project(FirstDayDataF1,xi,periodic = TRUE, graph = TRUE)  F1=PrF1$sp #The first day projection of the direction histogram at 10[m]  #Projections of the scatterplots to the periodic spline form  #The bivariate sampl FirstDayDataF1V1=as.matrix(Days[[1]][,4:5]) #we note that wind directions are scaled but not ordered   #Padding the data with zeros as the sampling frequency is not sufficiently dense over [0,1] FirstDayDataF1V1=rbind(FirstDayDataF1V1,cbind(seq(0,1,by=1/24),rep(0,25)))  #Another knot selection with more knots but still dyadic case k=4 N=3  n_knots2=2^N*k-1 #the number of internal knots for the dyadic case xi2 = seq(0, 1, length.out = n_knots2+2)   #For illustration one can plot the B-splines and the corresponding splinet so = splinet(xi2,smorder = k, periodic = TRUE,norm = TRUE)   plot(so$bs) plot(so$bs,type='dyadic') #To facilitate the comparison with the splinet better                            #one can choose the dyadic grapph plot(so$os)   #Projecting direction/wind data onto splines PrS1=project(FirstDayDataF1V1,xi2,smorder=k,periodic = TRUE, graph = TRUE) #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list.  S1=PrS1$sp  #the next 7 days  days= 7 #Transforming to the periodic data   #The direction histogram for(i in 2:days){   DataF1=cbind(hist(Days[[i]][,4],plot=FALSE,breaks=seq(0,1,by=0.1))$mids,                hist(Days[[i]][,4],plot=FALSE,breaks=seq(0,1,by=0.1))$counts)   PrF1=project(DataF1,xi,periodic = TRUE)      F1=gather(F1,PrF1$sp) #Collecting projections of daily wind-direction histograms at 10[m]    }  plot(F1) #plot of all daily functional data wind direction distributions   #Wind direction vs speed data at 10[m] for(i in 2:days){   DataF1V1=as.matrix(Days[[i]][,4:5]) #we note that wind directions are scaled but not ordered       #Padding the data with zeros as the sampling frequency is not sufficiently dense over [0,1]   DataF1V1=rbind(DataF1V1,cbind(seq(0,1,by=1/24),rep(0,25)))      PrS1=project(DataF1V1,xi2,smorder=k,periodic = TRUE)      S1=gather(S1,PrS1$sp) #Collecting projections of daily wind-direction histograms at 10[m]    } #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list. #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list. #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list. #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list. #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list. #> The input numerical data were not given in the increasing order. #>  The data are ordered and returned in the ordered form as the first value in the output list.  plot(S1) #plot of all daily functional data wind speed at wind direction  #Computing means of the data A=matrix(rep(1/days,days),ncol=days)  MeanF1=lincomb(F1,A) plot(MeanF1)  MeanS1=lincomb(S1,A) plot(MeanS1)"}]
